<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Yocto (Zeus) Kernel: 5.4.70 with Uboot: 18.04 (from Internal Git Server)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>3</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>tn/builder3</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <jenkins.triggers.ReverseBuildTrigger>
      <spec></spec>
      <upstreamProjects>boot2qt-5.15.1_5.4.70-internal-daily-build</upstreamProjects>
      <threshold>
        <name>FAILURE</name>
        <ordinal>2</ordinal>
        <color>RED</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </jenkins.triggers.ReverseBuildTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

cat &gt; site.conf &lt;&lt;EOF
BB_GIT_SHALLOW ?= &quot;1&quot;
BB_GIT_SHALLOW_DEPTH ?= &quot;1&quot;
# Usage in a recipe with multiple named uris or multiple named branches
BB_GIT_SHALLOW_DEPTH_doc = &quot;&quot;

# u-boot-tn-imx.bb
SRCSERVER_pn-u-boot-tn-imx = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
SRCBRANCH_pn-u-boot-tn-imx = &quot;tn-imx_v2020.04_5.4.70_2.3.0-next&quot;
SRCOPTIONS_pn-u-boot-tn-imx = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-u-boot-tn-imx = &quot;\${AUTOREV}&quot;
SRC_URI_pn-u-boot-tn-imx = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# u-boot-script.bb
#SRCSERVER_pn-u-boot-script = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCOPTIONS_pn-u-boot-script = &quot;;protocol=ssh;user=rdsw&quot;

# linux-firmware-brcm-tn.bb
SRCSERVER_pn-linux-firmware-brcm-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/brcm_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-brcm-tn = &quot;master&quot;
SRCOPTIONS_pn-linux-firmware-brcm-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-brcm-tn = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-firmware-brcm-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-brcm-tn = &quot;\${WORKDIR}/git&quot;

# linux-firmware-qca-tn.bb
SRCSERVER_pn-linux-firmware-qca-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/qca_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-qca-tn = &quot;caf-wlan/CNSS.LEA.NRT_3.0&quot;
SRCOPTIONS_pn-linux-firmware-qca-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-qca-tn = &quot;efa5726f00863a2a9e5dbf5708a5c116ec4b6092&quot;
SRC_URI_pn-linux-firmware-qca-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-qca-tn = &quot;\${WORKDIR}/git&quot;

# linux-tn-imx.bb
SRCSERVER_pn-linux-tn-imx = &quot;git://10.20.30.20/volume1/internal_git/edm/tn-kernel.git&quot;
SRCBRANCH_pn-linux-tn-imx = &quot;tn-imx_5.4.70_2.3.0-next&quot;
SRCOPTIONS_pn-linux-tn-imx = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-tn-imx = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-tn-imx = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
# Remove the upstream history from our kernel repo, keeping our own
BB_GIT_SHALLOW_REVS_pn-linux-tn-imx = &quot;\${AUTOREV}&quot;
BB_GIT_SHALLOW_DEPTH_pn-linux-tn-imx = &quot;&quot;
# Keep the branches in linux-tn-imx repositories
BB_GIT_SHALLOW_TRIM_REFS_pn-linux-tn-imx = &quot;0&quot;

# afloader.bb
TECHNEXION_GITHUB_MIRROR_pn-afloader = &quot;git://10.20.30.20/volume1/internal_git/fpga/afloader.git&quot;
SRCOPTIONS_pn-afloader = &quot;;protocol=ssh;user=rdsw&quot;
SRC_URI_pn-afloader = &quot;\${TECHNEXION_GITHUB_MIRROR};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# axonfabric-firmware.bb
TECHNEXION_GITHUB_MIRROR_pn-axonfabric-firmware = &quot;git://10.20.30.20/volume1/internal_git/fpga/axonfabric-firmware.git&quot;
SRCOPTIONS_pn-axonfabric-firmware = &quot;;protocol=ssh;user=rdsw&quot;
SRC_URI_pn-axonfabric-firmware = &quot;\${TECHNEXION_GITHUB_MIRROR};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# kernel-module-qcacld-tn.bb
SRCSERVER_pn-kernel-module-qcacld-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/qcacld-2.0.git&quot;
SRCBRANCH_pn-kernel-module-qcacld-tn = &quot;tn-CNSS.LEA.NRT_3.0&quot;
SRCOPTIONS_pn-kernel-module-qcacld-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-kernel-module-qcacld-tn = &quot;\${AUTOREV}&quot;
SRC_URI_pn-kernel-module-qcacld-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
EOF

cat &gt; local_manifest.xml &lt;&lt;EOF
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;manifest&gt;
  &lt;remote fetch=&quot;https://github.com/mendersoftware&quot; name=&quot;mender&quot;/&gt;
  &lt;project name=&quot;meta-mender&quot; remote=&quot;mender&quot; path=&quot;sources/meta-mender&quot; revision=&quot;refs/heads/zeus&quot;/&gt;

  &lt;remote name=&quot;internal&quot; fetch=&quot;ssh://rdsw@10.20.30.20/volume1/internal_git&quot; /&gt;

  &lt;remove-project name=&quot;meta-tn-imx-bsp&quot; /&gt;
  &lt;project name=&quot;edm/meta-tn-imx-bsp&quot; remote=&quot;internal&quot; path=&quot;sources/meta-tn-imx-bsp&quot; revision=&quot;refs/heads/zeus_5.4.70-2.3.0-next&quot; &gt;
     &lt;linkfile src=&quot;tools/tn-setup-release.sh&quot; dest=&quot;tn-setup-release.sh&quot;/&gt;
  &lt;/project&gt;

  &lt;project name=&quot;mender/meta-mender-community&quot; remote=&quot;internal&quot; path=&quot;sources/meta-mender-community&quot; revision=&quot;refs/heads/zeus&quot; &gt;
    &lt;linkfile src=&quot;meta-mender-tn-imx-bsp/scripts/tn-setup-mender.sh&quot; dest=&quot;tn-setup-mender.sh&quot;/&gt;
  &lt;/project&gt;
&lt;/manifest&gt;
EOF

cat &gt; manifest-boot2qt.xml &lt;&lt;EOF
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;manifest&gt;
  &lt;remote fetch=&quot;ssh://rdsw@10.20.30.20/volume1/internal_git&quot; name=&quot;internal&quot; /&gt;

  &lt;remove-project name=&quot;meta-boot2qt&quot; /&gt;
  &lt;project remote=&quot;internal&quot; name=&quot;meta-boot2qt&quot; path=&quot;sources/meta-boot2qt&quot; revision=&quot;zeus-tn-boot2qt-5.15.1-next&quot; &gt;
    &lt;linkfile src=&quot;scripts/setup-environment.sh&quot; dest=&quot;setup-environment.sh&quot; /&gt;
  &lt;/project&gt;
&lt;/manifest&gt;
EOF</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e


# setup yocto sstate cache and download directories
DLDIR=/home/jenkins/workspace/src/yocto3.0/downloads
SSTATEDIR=/home/jenkins/workspace/src/yocto3.0/sstate-cache

MACHINEs=(&quot;pico-imx8mm&quot;) # &quot;axon-imx8mm&quot;) # &quot;axon-imx8mp&quot; &quot;edm-g-imx8mp&quot; &quot;pico-imx8mq&quot; &quot;edm-imx8mq&quot;) # axon-imx8mm edm-g-imx8mm

MANUSCRIPTs=(imx-5.4.70-2.3.0-boot2qt.xml imx-5.4.70-2.3.0.xml imx-5.4.70-2.3.0-virtualization.xml)
MANUSCRIPT_MENDER=meta-mender-tn-imx-bsp/scripts/mender-technexion.xml

GITSERVER=&quot;10.20.30.20&quot;
GITMIRROR=&quot;10.88.88.8&quot;
chmod 0600 ~/.ssh/id_rsa
ssh-keyscan ${GITSERVER} &gt;&gt; ~/.ssh/known_hosts
ssh-keyscan ${GITMIRROR} &gt;&gt; ~/.ssh/known_hosts

rm -rf sources/*

setup_repo () {
  # clear repo
  rm -rf .repo

  # initialize technexion github yocto repository
  echo ===== Repo init yocto from TechNexion github =====
  #${HOME}/bin/repo init -u https://github.com/TechNexion/tn-imx-yocto-manifest.git -b zeus_5.4.y-next -m $1
  ${HOME}/bin/repo init -u ssh://rdsw@${GITSERVER}/volume1/internal_git/edm/tn-imx-yocto-manifest.git -b zeus_5.4.y-next -m $1

  # use local manifests to override existing projects
  mkdir -p .repo/local_manifests/
  cp ./local_manifest.xml .repo/local_manifests/
  if [ &quot;$1&quot; = *&quot;boot2qt&quot;* ]; then
    cp ./manifest-boot2qt.xml .repo/local_manifests/
  fi

# wget local_manifest for mender
#wget --directory-prefix .repo/local_manifests https://github.com/TechNexion-customization/meta-mender-community/raw/zeus/$MANUSCRIPT_MENDER
#  cat .repo/local_manifests/manifest-technexion.xml

  echo ===== Repo sync yocto from TechNexion github =====
  rm -f -R sources/*
  rm -f -R *.sh
  ${HOME}/bin/repo sync --force-sync

  # Update EULA Agreement Acceptance Config and Create the setup-envronment scripts
  echo ===== Update EULA Agreement Acceptance Config and Create the setup-envronment scripts =====
  if [ -e sources/base/setup-environment ]; then
    sed -i &apos;:a;N;$!ba;s/EULA_ACCEPTED=\n/echo &quot;ACCEPT_FSL_EULA = \\&quot;1\\&quot;&quot; &gt;&gt; conf\/local.conf\n/&apos; sources/base/setup-environment
  fi
}

# setup environment variables
setup_env_vars () {
  case $1 in
    pico-imx8mq)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    pico-imx8mm)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    edm-imx8mq)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    flex-imx8mm)
      board=&quot;wizard&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    axon-imx8mm)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    xore-imx8mm)
      board=&quot;wizard&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    pico-imx6)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    pico-imx6ul)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    pico-imx7)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    pico-imx6ul)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    edm-imx6)
      board=&quot;fairy&quot;
      disp=&quot;lvds7&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    edm-imx7)
      board=&quot;gnome&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    axon-imx6)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tep1-imx7)
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tep1-imx6ul)
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tek-imx6)
      disp=&quot;lvds10&quot;
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tek3-imx6ul)
      distro=&quot;fsl-imx-x11&quot;
      ;;
  	*)
      ;;
  esac
}

setup_target_vars () {
  case $1 in
    *boot2qt*)
      tgt=&quot;b2qt-embedded-qt5-image&quot;
      ;;
    *virtualization*)
      tgt=&quot;tn-image-docker-os&quot;
      ;;
  	*)
      tgt=&quot;fsl-image-qt5-validation-imx&quot;
      ;;
  esac
}

# update ./conf/local.conf setting
setup_local_conf () {
	CURDIR=.

	# Setup the download and sstate-cache directories for faster build
    if grep &quot;^DL_DIR.*&quot; $CURDIR/conf/local.conf &gt; /dev/null ; then
		sed -e &apos;s|^DL_DIR.*|DL_DIR = &quot;&apos;$DLDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    else
		echo &quot;DL_DIR = \&quot;$DLDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    fi
    if grep &quot;^SSTATE_DIR.*&quot; $CURDIR/conf/local.conf &gt; /dev/null ; then
		sed -e &apos;s|^SSTATE_DIR.*|SSTATE_DIR = &quot;&apos;$SSTATEDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
	else
		echo &quot;SSTATE_DIR = \&quot;$SSTATEDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
	fi
    echo &quot;DOCKER_SHAREDIR_virtualization = \&quot;/home/admin/jenkins_home\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf

    # NFC
    sed -e &apos;s|^NFC.*|NFC = &quot;&quot;|g&apos; -i $CURDIR/conf/local.conf

    # docker/container
    echo &quot;TN_CONTAINER_IMAGE_virtualization = \&quot;tn-container-image-lighttpd\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    echo &quot;TN_DOCKER_PARTITION_IMAGE_virtualization = \&quot;docker-data-partition.img\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf

	# mender
    sed -e &apos;s|^MENDER_ARTIFACT_NAME.*|MENDER_ARTIFACT_NAME = &quot;&apos;$artifact_name&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    echo &quot;MENDER_ARTIFACT_PACKAGES = \&quot;zip\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    echo &quot;PACKAGE_CLASSES += \&quot;package-mender-artifacts\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf

    echo &quot;PA_TOKEN ?= \&quot;SbtQ_mC4fvJRA88_9jB7\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf

	echo ===== ./conf/local.conf =====
	cat $CURDIR/conf/local.conf
	unset CURDIR
}

# update ./conf/bblayer.conf setting
setup_bblayer_conf () {
	CURDIR=.

	# Support integrating community meta-freescale instead of meta-fsl-arm
	if [ -d ../sources/meta-freescale ]; then
		echo meta-freescale directory found
		# Change settings according to environment
		sed -e &quot;s,meta-fsl-arm\s,meta-freescale ,g&quot; -i $CURDIR/conf/bblayers.conf
		sed -e &quot;s,\$.BSPDIR./sources/meta-fsl-arm-extra\s,,g&quot; -i $CURDIR/conf/bblayers.conf
	fi
	echo ===== ./conf/bblayers.conf =====
	cat $CURDIR/conf/bblayers.conf
	unset CURDIR
}

# build the yocto image
build_yocto () {
	# go to workspace for next build
	cd ${WORKSPACE}
    
    # remove build directory
    rm -fr build-$1

	# setup repo and repo sync sources/folders
	setup_repo $2

    # Set up the build environment variables
    setup_env_vars $1
    setup_target_vars $2

	# building the yocto with preset config params
	echo ===== Building SOM:$1 MANUSCRIPT:$2 TARGET:$tgt =====

    artifact_name=&quot;$tgt-$1-${BUILD_NUMBER}&quot;
    
    # setup boot2qt
    if grep -q &quot;boot2qt&quot; &lt;&lt;&lt; $2; then
      export MACHINE=$1
      # Set up the basic yocto environment via tn-setup-mender.sh
      source ./tn-setup-mender.sh -b build-$1 || :
    else
      # Set up the basic yocto environment via tn-setup-mender.sh
      MACHINE=$1 DISTRO=$distro source ./tn-setup-mender.sh -b build-$1 || :
    fi

	# setup ./conf/local.conf
	if [ ! -e ./conf/local.conf ]; then
		echo -e &quot;\n ERROR - No local.conf, Run the &apos;setup-environment&apos; script again\n&quot;
		return 1
    else
		setup_local_conf $1
	fi

	# setup ./conf/bblayers.conf
    if [ ! -e ./conf/bblayers.conf ]; then
		echo -e &quot;\n ERROR - No bblayers.conf, Run the &apos;setup-environment&apos; script again\n&quot;
		return 1
    else
    	setup_bblayer_conf
    fi

    # setup uEnv.txt parameters
    export BASE_BOARD=$board
    export RF_FIRMWARES=$wlan
    export DISPLAY_INFO=$disp
    export DISPLAY_PANEL=$pan
    export BB_ENV_EXTRAWHITE=&quot;$BB_ENV_EXTRAWHITE BASE_BOARD DISPLAY_INFO DISPLAY_PANEL RF_FIRMWARES&quot;
    export

	# copy the site.conf to get qca firmware from internal git
	cp ${WORKSPACE}/site.conf ./conf/site.conf
    cat ./conf/site.conf

	# Build using bitbake
    #if grep -q &quot;virtualization&quot; &lt;&lt;&lt; $2; then
    #  bitbake multiconfig:container:tn-container-image-lighttpd -c cleanall
	#  bitbake multiconfig:container:tn-container-image-lighttpd
    #fi
	bitbake $tgt

    # build additional mender packages
    if grep -q &quot;virtualization&quot; &lt;&lt;&lt; $2; then
      bitbake mender-docker-artifacts
      bitbake zip
    fi

    cp -fr ${WORKSPACE}/build-$1/tmp/deploy ${WORKSPACE}/
}

# loop manuscripts
loop_scripts () {
	for script in ${MANUSCRIPTs[*]}; do
    	build_yocto $1 $script
    done
}

# build loops to build all necessary combinations
for som in ${MACHINEs[*]}; do
	loop_scripts $som
done
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>deploy/images/*/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>Po Cheng &lt;po.cheng@technexion.com&gt;</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>true</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>