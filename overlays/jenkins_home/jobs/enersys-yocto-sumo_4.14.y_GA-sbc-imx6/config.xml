<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>sbc imx6 tn230 yocto sumo build for enersys</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>2</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/yocto-builder</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

MANIFESTURL=ssh://git@gitlab.com/technexion-odm/technexion-enersys/tn-imx-yocto-manifest.git
BRANCHNAME=sumo_4.14.y_GA-next-enersys
MANUSCRIPT=imx-4.14.98-2.0.1_patch.xml

# secure permission of id_rsa private key
chmod 0600 ~/.ssh/id_rsa
ssh-keyscan gitlab.com &gt;&gt; ~/.ssh/known_hosts

# initialize technexion github yocto repository
echo ===== Repo init from gitlab manifest =====
${HOME}/bin/repo init -u $MANIFESTURL -b $BRANCHNAME -m $MANUSCRIPT
cat .repo/manifests/$MANUSCRIPT

echo ===== Repo sync to get source codes =====
${HOME}/bin/repo sync --force-sync

# Update EULA Agreement Acceptance Config and Create the setup-envronment scripts
echo ===== Update EULA Agreement Acceptance Config and Create the setup-envronment scripts =====
sed -i &apos;:a;N;$!ba;s/EULA_ACCEPTED=\n/echo &quot;ACCEPT_FSL_EULA = \\&quot;1\\&quot;&quot; &gt;&gt; conf\/local.conf\n/&apos; sources/base/setup-environment

# Setup download and sstate directories
DLDIR=/home/jenkins/workspace/src/yocto2.5/download
SSTATEDIR=/home/jenkins/workspace/src/yocto2.5/sstat

# Configurations for building sbc-imx6
SOMs=(&quot;sbc-imx6&quot;)
TGTIMGTYPEs=(&quot;fsl-image-qt5-validation-imx&quot;)

# setup environment variables for building
setup_env_vars () {
  case $1 in
    sbc-imx6)
      board=&quot;&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      distro=&quot;x11&quot;
      ;;
  	*)
      ;;
  esac
}

# Loop each som distro image_type and configs
for som in ${SOMs[*]}; do
    # building the yocto with preset config params
    echo &quot;===== Building SOM:$som DISTRO:fsl-imx-$distro TARGET:$target =====&quot;

    # go to workspace for next build
    cd ${WORKSPACE}

    # Set up the build environment variables
    setup_env_vars $som
    echo &quot;===== WLAN:$wlan DISPLAY:$disp BASEBOARD:$board PANEL:$panel =====&quot;

    # setup yocto build environment
    MACHINE=$som DISTRO=fsl-imx-$distro WIFI_FIRMWARE=y WIFI_MODULE=$wlan source edm-setup-release.sh -b build-$som || :

    # get current build dir and check if local.conf exists
    BUILD_DIR=.
    if [ ! -e $BUILD_DIR/conf/local.conf ]; then
        echo -e &quot;\n ERROR - No build directory is set yet. Run the &apos;setup-environment&apos; script before running this script to create &quot; $BUILD_DIR
        echo -e &quot;\n&quot;
        return 1
    else
        # set the download directory
        [ -d ${DLDIR} ] || mkdir -p ${DLDIR}
        [ -d ${SSTATEDIR} ] || mkdir -p ${SSTATEDIR}
        # setup conf/local.conf
        if grep &quot;^DL_DIR.*&quot; $BUILD_DIR/conf/local.conf &gt; /dev/null ; then
            sed -e &apos;s|^DL_DIR.*|DL_DIR = &quot;&apos;$DLDIR&apos;&quot;|g&apos; -i $BUILD_DIR/conf/local.conf
        else
            echo &quot;DL_DIR = \&quot;$DLDIR\&quot;&quot; &gt;&gt; $BUILD_DIR/conf/local.conf
        fi
        if grep &quot;^SSTATE_DIR.*&quot; $BUILD_DIR/conf/local.conf &gt; /dev/null ; then
            sed -e &apos;s|^SSTATE_DIR.*|SSTATE_DIR = &quot;&apos;$SSTATEDIR&apos;&quot;|g&apos; -i $BUILD_DIR/conf/local.conf
        else
            echo &quot;SSTATE_DIR = \&quot;$SSTATEDIR\&quot;&quot; &gt;&gt; $BUILD_DIR/conf/local.conf
	    fi
    fi

    cat $BUILD_DIR/conf/bblayers.conf
    cat $BUILD_DIR/conf/local.conf
    export

    bitbake u-boot-edm -c cleanall
    bitbake linux-tn-imx -c cleanall
    # build both fsl-image-validation-imx, fsl-image-qt5-validation-imx images
    for target in ${TGTIMGTYPEs[*]}; do
        # Compile using bitbake
        bitbake $target -c cleanall
        bitbake $target
    done
done</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>build-*/tmp/deploy/images/*/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>true</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>