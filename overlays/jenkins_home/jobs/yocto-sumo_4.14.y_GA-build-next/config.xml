<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Yocto (Sumo) Kernel: 4.14.98 Uboot: 2018.03</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>tn/builder3</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

cat &gt; site.conf &lt;&lt;EOF
# u-boot-edm.bb
#SRCSERVER_pn-u-boot-edm = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCBRANCH_pn-u-boot-edm = &quot;tn-imx_v2018.03_4.14.98_2.0.0_ga-wip&quot;
#SRCOPTIONS_pn-u-boot-edm = &quot;;protocol=ssh;user=rdsw&quot;
#&quot;080a178dd478f6b590d1a5b73b687238ac93b859&quot;
#SRCREV_pn-u-boot-edm = &quot;619d30ee2f6c878879e9a1f49440e07d5a95dc42&quot;
#SRC_URI_pn-u-boot-edm = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# u-boot-script.bb
#SRCSERVER_pn-u-boot-script = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCOPTIONS_pn-u-boot-script = &quot;;protocol=ssh;user=rdsw&quot;

# linux-firmware-brcm-tn.bb
#SRCSERVER_pn-linux-firmware-brcm-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/brcm_firmware.git&quot;
#SRCBRANCH_pn-linux-firmware-brcm-tn = &quot;master&quot;
#SRCOPTIONS_pn-linux-firmware-brcm-tn = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-linux-firmware-brcm-tn = &quot;317394ca84258e4f11a138014820eebf0c43db1e&quot;
#SRC_URI_pn-linux-firmware-brcm-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
#S_pn-linux-firmware-brcm-tn = &quot;\${WORKDIR}/git&quot;

# linux-firmware-qca-tn.bb
#SRCSERVER_pn-linux-firmware-qca-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/qca_firmware.git&quot;
#SRCBRANCH_pn-linux-firmware-qca-tn = &quot;caf-wlan/CNSS.LEA.NRT_3.0&quot;
#SRCOPTIONS_pn-linux-firmware-qca-tn = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-linux-firmware-qca-tn = &quot;e095f250346d337d91eacc95393f21e3e58140e2&quot;
#SRC_URI_pn-linux-firmware-qca-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
#S_pn-linux-firmware-qca-tn = &quot;\${WORKDIR}/git&quot;

# linux-tn-imx.bb
#SRCSERVER_pn-linux-tn-imx = &quot;git://10.88.88.8/volume1/internal_git/edm/tn-kernel.git&quot;
#SRCBRANCH_pn-linux-tn-imx = &quot;tn-imx_4.14.98_2.0.0_ga-wip&quot;
#SRCOPTIONS_pn-linux-tn-imx = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-linux-tn-imx = &quot;\${AUTOREV}&quot;
#SRC_URI_pn-linux-tn-imx = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

EOF

# &quot;89e7c52ae68a1ae81cc217d86ebf9d1384df18d3&quot;
cat &gt; local_manifest.xml &lt;&lt;EOF
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;manifest&gt;
  &lt;remote name=&quot;internal&quot; fetch=&quot;ssh://rdsw@10.20.30.20/volume1/internal_git/edm&quot; /&gt;

  &lt;remove-project name=&quot;meta-tn-imx-bsp&quot; /&gt;
  &lt;project name=&quot;meta-tn-imx-bsp&quot; remote=&quot;internal&quot; path=&quot;sources/meta-tn-imx-bsp&quot; revision=&quot;sumo_4.14.98-2.0.0_GA-next&quot; &gt;
     &lt;linkfile src=&quot;tools/edm-setup-release.sh&quot; dest=&quot;edm-setup-release.sh&quot;/&gt;
     &lt;linkfile src=&quot;tools/setup-environment.sh&quot; dest=&quot;setup-environment&quot;/&gt;
     &lt;linkfile src=&quot;README&quot; dest=&quot;README-TechNexion-BSP&quot;/&gt;
  &lt;/project&gt;
&lt;/manifest&gt;
EOF</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

MANUSCRIPT=imx-4.14.98-2.0.1_patch.xml

GITSERVER=&quot;10.20.30.20&quot;
chmod 0600 ~/.ssh/id_rsa
ssh-keyscan ${GITSERVER} &gt;&gt; ~/.ssh/known_hosts

# initialize technexion github yocto repository
echo ===== Repo init yocto from TechNexion github =====
${HOME}/bin/repo init -u https://github.com/TechNexion/tn-imx-yocto-manifest.git -b sumo_4.14.y_GA-next -m $MANUSCRIPT

echo ===== Repo sync yocto from TechNexion github =====
#mkdir -p .repo/local_manifests/
#cp local_manifest.xml .repo/local_manifests/
rm -f -r sources/meta-tn-imx-bsp
${HOME}/bin/repo sync --force-sync

# Update EULA Agreement Acceptance Config and Create the setup-envronment scripts
echo ===== Update EULA Agreement Acceptance Config and Create the setup-envronment scripts =====
sed -i &apos;:a;N;$!ba;s/EULA_ACCEPTED=\n/echo &quot;ACCEPT_FSL_EULA = \\&quot;1\\&quot;&quot; &gt;&gt; conf\/local.conf\n/&apos; sources/base/setup-environment

DLDIR=/home/jenkins/workspace/src/yocto2.5/downloads
SSTATEDIR=/home/jenkins/workspace/src/yocto2.5/sstate-cache

SOMs=(&quot;pico-imx6ul&quot; &quot;pico-imx6&quot; &quot;pico-imx7&quot; &quot;edm-imx6&quot; &quot;edm-imx7&quot; &quot;tep1-imx7&quot; &quot;tek-imx6&quot; &quot;axon-imx6&quot; &quot;pico-imx8mq&quot; &quot;pico-imx8mm&quot; &quot;edm-imx8mq&quot; &quot;flex-imx8mm&quot; &quot;xore-imx8mm&quot; &quot;axon-imx8mm&quot;)
TGTIMGTYPEs=(&quot;fsl-image-qt5-validation-imx&quot;) # &quot;fsl-image-qt5-validation-imx&quot; &quot;core-image-minimal&quot; &quot;core-image-base&quot; &quot;core-image-sato&quot; &quot;fsl-image-machine-test&quot;

# setup environment variables for building
# BASEBOARDs=(&quot;pi&quot; &quot;nymph&quot; &quot;dwarf&quot; &quot;hobbit&quot;)
# DISPLAYs=(&quot;lvds7&quot; &quot;hdmi720p&quot; &quot;hdmi1080p&quot; &quot;lcd&quot; &quot;lvds7_hdmi720p&quot;)
# WLANs=(&quot;qca&quot; &quot;brcm&quot; &quot;ath-pci&quot;)
# DISTROs=(&quot;xwayland&quot; &quot;x11&quot; &quot;fb&quot; &quot;wayland&quot; &quot;xwayland&quot;
setup_env_vars () {
  case $1 in
    pico-imx8mq)
      distro=&quot;xwayland&quot;
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      nfc=&quot;nfc&quot;
      ;;
    edm-imx8mq)
      distro=&quot;xwayland&quot;
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    pico-imx8mm)
      distro=&quot;xwayland&quot;
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      nfc=&quot;nfc&quot;
      ;;
    flex-imx8mm)
      distro=&quot;xwayland&quot;
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    axon-imx8mm)
      distro=&quot;xwayland&quot;
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    xore-imx8mm)
      distro=&quot;xwayland&quot;
      board=&quot;wizard&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    axon-imx6)
      distro=&quot;x11&quot;
      board=&quot;pi&quot;
      disp=&quot;hdmi&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    edm-imx6)
      distro=&quot;x11&quot;
      board=&quot;fairy&quot;
      disp=&quot;lvds7&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    edm-imx7)
      distro=&quot;x11&quot;
      board=&quot;gnome&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    pico-imx6ul)
      distro=&quot;x11&quot;
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    pico-imx6)
      distro=&quot;x11&quot;
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    pico-imx7)
      distro=&quot;x11&quot;
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    tek-imx6)
      distro=&quot;x11&quot;
      disp=&quot;lvds10 lvds15&quot;
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      ;;
    tep1-imx7)
      board=&quot;&quot;
      distro=&quot;x11&quot;
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      ;;
    tek3-imx6ul)
      ;;
    tep1-imx6ul)
      ;;
  	*)
      ;;
  esac
}

# update ./conf/local.conf setting
setup_local_conf () {
    CURDIR=.

    # setup conf/local.conf
    if grep &quot;^DL_DIR.*&quot; $BUILD_DIR/conf/local.conf &gt; /dev/null ; then
        sed -e &apos;s|^DL_DIR.*|DL_DIR = &quot;&apos;$DLDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    else
        echo &quot;DL_DIR = \&quot;$DLDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    fi
    if grep &quot;^SSTATE_DIR.*&quot; $BUILD_DIR/conf/local.conf &gt; /dev/null ; then
        sed -e &apos;s|^SSTATE_DIR.*|SSTATE_DIR = &quot;&apos;$SSTATEDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    else
        echo &quot;SSTATE_DIR = \&quot;$SSTATEDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    fi

    if [ &quot;$som&quot; = &quot;flex-imx8mm&quot; -o &quot;$som&quot; = &quot;pico-imx8mm&quot; ]; then
        echo &quot;IMAGE_INSTALL_append = \&quot; pt2-usb57x4\&quot;&quot; &gt;&gt; $BUILD_DIR/conf/local.conf
    fi

    echo &quot;INHERIT += \&quot;rm_work\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf

    unset CURDIR
}

# export additional paramters through BB_ENV_EXTRAWHITE
setup_bb_env_extrawhite () {
    unset BASE_BOARD DISPLAY_INFO DISPLAY_PANEL RF_FIRMWARES
    # setup uEnv.txt parameters
    export BASE_BOARD=$board
    export RF_FIRMWARES=$wlan
    export DISPLAY_INFO=$2
    export DISPLAY_PANEL=$pan
    export BB_ENV_EXTRAWHITE=&quot;$BB_ENV_EXTRAWHITE BASE_BOARD DISPLAY_INFO DISPLAY_PANEL RF_FIRMWARES&quot;

    if [ &quot;$1&quot; = &quot;pico-imx8mq&quot; -o &quot;$1&quot; = &quot;pico-imx8mm&quot; ]; then
        # additional NFC to pico-imx8mq build
        export NFC=${nfc}
        export BB_ENV_EXTRAWHITE=&quot;$BB_ENV_EXTRAWHITE NFC&quot;
    fi
}

build_yocto () {
    # go to workspace for next build
    cd ${WORKSPACE}

    echo &quot;===== Building SOM:$1 DISTRO:fsl-imx-$distro WIFI:$wlan DISPLAY:$2 BOARD:$board PANEL:$pan TARGET:$3 =====&quot;

	# Set up the basic yocto environment
    #MACHINE=$som DISTRO=fsl-imx-$distro WIFI_FIRMWARE=y WIFI_MODULE=$wlan DISPLAY=$2 BASEBOARD=$board PANEL=$pan source edm-setup-release.sh -b build-$som || :
    MACHINE=$1 DISTRO=fsl-imx-$distro source ./edm-setup-release.sh -b build-$1-$2 || :

	# get current build dir and check if local.conf exists
    BUILD_DIR=.
    if [ ! -e $BUILD_DIR/conf/local.conf ]; then
        echo -e &quot;\n ERROR - No build directory is set yet. Run the &apos;setup-environment&apos; script before running this script to create &quot; $BUILD_DIR &quot;\n&quot;
        return 1
    else
        setup_local_conf
    fi

    setup_bb_env_extrawhite $1 $2

    # copy the site.conf from ${workspace} for internal git fetch
    cp $WORKSPACE/site.conf $BUILD_DIR/conf/site.conf

    # export of the conf and bitbake environment settings
    cat $BUILD_DIR/conf/site.conf
    cat $BUILD_DIR/conf/local.conf
    cat $BUILD_DIR/conf/bblayers.conf
    export

	# build target
    bitbake u-boot-edm -c cleansstate
    bitbake linux-tn-imx -c cleansstate
    bitbake $3 -c cleanall
    bitbake $3 -e | grep ^OVERRIDES
	bitbake $3

}

# loop targets
loop_targets () {
	for target in ${TGTIMGTYPEs[*]}; do
    	build_yocto $1 $2 $target
    done
}

loop_display() {
    # Set up the build environment variables
    setup_env_vars $1

	for dp in $disp; do
		loop_targets $1 $dp
	done
}

# build loops to build all necessary combinations
for som in ${SOMs[*]}; do
	loop_display $som
done
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>build-*/tmp/deploy/images/*/*sdcard*,build-*/tmp/deploy/images/*/imx-boot*,build-*/tmp/deploy/images/*/SPL*,build-*/tmp/deploy/images/*/u-boot*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>Po Cheng &lt;po.cheng@technexion.com&gt;</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>true</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>