<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.2">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>build edm-imx8mq firmware for u-boot 2018.03&#xd;
&#xd;
for imx-mkimage tool: git clone https://source.codeaurora.org/external/imx/imx-mkimage&#xd;
for imx-atf ARM Trusted Firmware: git clone https://source.codeaurora.org/external/imx/imx-atf&#xd;
for DDR and HDMI firmware: wget https://www.nxp.com/lgfiles/NMG/MAD/YOCTO/firmware-imx-8.2.bin&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <jenkins.triggers.ReverseBuildTrigger>
          <spec></spec>
          <upstreamProjects>github_uboot-v2018.03_4.14.98_arm64</upstreamProjects>
          <threshold>
            <name>SUCCESS</name>
            <ordinal>0</ordinal>
            <color>BLUE</color>
            <completeBuild>true</completeBuild>
          </threshold>
        </jenkins.triggers.ReverseBuildTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>5</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.39.1">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.41">
    <script>// Declarative //
pipeline {
    agent {
        label &apos;docker-slave/kernel&apos;
    }
    stages {
        stage(&apos;Clear workspace&apos;) {
            steps {
                cleanWs()
            }
        }
        stage(&apos;Checkout mkimage&apos;) {
            steps {
                echo &quot;Stage Get imx-mkimage Source to use its Makefile&quot;
                // git branch: &apos;imx_4.14.98_2.0.0_ga&apos;, url: &apos;https://source.codeaurora.org/external/imx/imx-mkimage&apos; //
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/imx_4.14.98_2.0.0_ga&apos;]], \
                                                    doGenerateSubmoduleConfigurations: false, \
                                                    extensions: [], \
                                                    submoduleCfg: [], \
                                                    userRemoteConfigs: [[url: &apos;https://source.codeaurora.org/external/imx/imx-mkimage&apos;]]])
                sh &apos;ls -al ./&apos;
            }
        }
        stage(&apos;Checkout ATF&apos;) {
            steps {
                echo &quot;Get bl31.bin - ARM Trusted Firmware from Artifacts&quot;
                copyArtifacts filter: &apos;build/imx8mq/release/bl31.bin&apos;, fingerprintArtifacts: true, projectName: &apos;gen_imx-atf_4.14.98-ga&apos;, target: &apos;./iMX8M/&apos;
                sh &apos;mv ./iMX8M/build/imx8mq/release/bl31.bin ./iMX8M/&apos;
                sh &apos;rm -fr ./iMX8M/build&apos;
                sh &apos;ls -al ./iMX8M/&apos;
			}
		}
		stage(&apos;Checkout DDR/HDMI&apos;) {
            steps {
                echo &quot;Get ddr/hdmi bin files - DDR / HDMI firmware&quot;
                copyArtifacts filter: &apos;firmware-imx-8.2/firmware/ddr/synopsys/*.bin&apos;, fingerprintArtifacts: true, projectName: &apos;gen_imx-ddrhdmi-8.2&apos;, target: &apos;./iMX8M/&apos;
                copyArtifacts filter: &apos;firmware-imx-8.2/firmware/hdmi/cadence/*.bin&apos;, fingerprintArtifacts: true, projectName: &apos;gen_imx-ddrhdmi-8.2&apos;, target: &apos;./iMX8M/&apos;
                sh &apos;mv ./iMX8M/firmware-imx-8.2/firmware/ddr/synopsys/*.bin ./iMX8M/&apos;
                sh &apos;mv ./iMX8M/firmware-imx-8.2/firmware/hdmi/cadence/*.bin ./iMX8M/&apos;
                sh &apos;rm -fr ./iMX8M/firmware-imx-8.2&apos;
                sh &apos;ls -al ./iMX8M/&apos;
            }
		}
		stage(&apos;Checkout build uboot files&apos;) {
		    steps {
		        echo &quot;Get uboot files&quot;
		        // http://10.88.88.10:8080/job/github_uboot-v2018.03_4.14.98_arm64/10/artifact/edm-imx8mq/arch/arm/dts/imx8mq-edm-wizard.dtb
		        copyArtifacts filter: &apos;edm-imx8mq/spl/u-boot-spl.bin&apos;, fingerprintArtifacts: true, projectName: &apos;github_uboot-v2018.03_4.14.98_arm64&apos;, selector: lastSuccessful(), target: &apos;./iMX8M/&apos;
                copyArtifacts filter: &apos;edm-imx8mq/arch/arm/dts/imx8mq-edm-wizard.dtb&apos;, fingerprintArtifacts: true, projectName: &apos;github_uboot-v2018.03_4.14.98_arm64&apos;, target: &apos;./iMX8M/&apos;
                copyArtifacts filter: &apos;edm-imx8mq/tools/mkimage&apos;, fingerprintArtifacts: true, projectName: &apos;github_uboot-v2018.03_4.14.98_arm64&apos;, target: &apos;./iMX8M/&apos;
                copyArtifacts filter: &apos;edm-imx8mq/u-boot-nodtb.bin&apos;, fingerprintArtifacts: true, projectName: &apos;github_uboot-v2018.03_4.14.98_arm64&apos;, target: &apos;./iMX8M/&apos;
                sh &apos;mv ./iMX8M/edm-imx8mq/spl/u-boot-spl.bin ./iMX8M/&apos;
                sh &apos;mv ./iMX8M/edm-imx8mq/arch/arm/dts/imx8mq-edm-wizard.dtb ./iMX8M/&apos;
                sh &apos;mv ./iMX8M/edm-imx8mq/tools/mkimage ./iMX8M/mkimage_uboot&apos;
                sh &apos;mv ./iMX8M/edm-imx8mq/u-boot-nodtb.bin ./iMX8M/&apos;
                sh &apos;rm -fr ./iMX8M/edm-imx8mq/&apos;
                sh &apos;ls -al ./iMX8M/&apos;
		    }
		}
		stage(&apos;Generate Bootable Binary - flash.bin&apos;) {
		    steps {
		        echo &quot;Use imx-mkimage to build flash.bin&quot;
		        sh &apos;make SOC=iMX8M dtbs=imx8mq-edm-wizard.dtb flash_hdmi_spl_uboot&apos;
		        sh &apos;mkdir -p /home/jenkins/build/uboot/edm-imx8mq/&apos;
		        sh &apos;[ -f ./iMX8M/flash.bin ] &amp;&amp; cp ./iMX8M/flash.bin /home/jenkins/build/uboot/edm-imx8mq/&apos;
		    }
		}
	}
    post {
        always {
            archiveArtifacts artifacts: &apos;iMX8M/flash.bin&apos;, fingerprint: true, onlyIfSuccessful: true
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>240</quietPeriod>
  <disabled>true</disabled>
</flow-definition>