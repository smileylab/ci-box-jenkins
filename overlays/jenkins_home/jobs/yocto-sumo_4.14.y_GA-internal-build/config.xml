<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Yocto (Sumo) Kernel: 4.14.98 Uboot: 2018.03 (from Internal Git Server)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>3</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/yocto-builder</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>data/${JOB_NAME}</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

cat &gt; site.conf &lt;&lt;EOF
# u-boot-edm.bb
#SRCSERVER_pn-u-boot-edm = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCBRANCH_pn-u-boot-edm = &quot;tn-imx_v2018.03_4.14.98_2.0.0_ga-wip&quot;
#SRCOPTIONS_pn-u-boot-edm = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-u-boot-edm = &quot;080a178dd478f6b590d1a5b73b687238ac93b859&quot;
#SRC_URI_pn-u-boot-edm = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# u-boot-script.bb
#SRCSERVER_pn-u-boot-script = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCOPTIONS_pn-u-boot-script = &quot;;protocol=ssh;user=rdsw&quot;

# linux-firmware-brcm-tn.bb
SRCSERVER_pn-linux-firmware-brcm-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/brcm_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-brcm-tn = &quot;master&quot;
SRCOPTIONS_pn-linux-firmware-brcm-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-brcm-tn = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-firmware-brcm-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-brcm-tn = &quot;\${WORKDIR}/git&quot;

# linux-firmware-qca-tn.bb
SRCSERVER_pn-linux-firmware-qca-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/qca_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-qca-tn = &quot;caf-wlan/CNSS.LEA.NRT_3.0&quot;
SRCOPTIONS_pn-linux-firmware-qca-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-qca-tn = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-firmware-qca-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-qca-tn = &quot;\${WORKDIR}/git&quot;

# linux-tn-imx.bb
SRCSERVER_pn-linux-tn-imx = &quot;git://10.88.88.8/volume1/internal_git/edm/tn-kernel.git&quot;
SRCBRANCH_pn-linux-tn-imx = &quot;tn-imx_4.14.98_2.0.0_ga-wip&quot;
SRCOPTIONS_pn-linux-tn-imx = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-tn-imx = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-tn-imx = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

IMAGE_INSTALL += &quot;lsof grep&quot;
EOF
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

MANUSCRIPT=imx-4.14.98-2.0.0_ga.xml

GITSERVER=&quot;10.20.30.20&quot;
GITMIRROR=&quot;10.88.88.8&quot;
chmod 0600 ~/.ssh/id_rsa
ssh-keyscan ${GITSERVER} &gt;&gt; ~/.ssh/known_hosts
ssh-keyscan ${GITMIRROR} &gt;&gt; ~/.ssh/known_hosts

# initialize technexion github yocto repository
echo ===== Repo init yocto from TechNexion github =====
${HOME}/bin/repo init -u https://github.com/TechNexion/edm-yocto-bsp.git -b sumo_4.14.y_GA -m $MANUSCRIPT
#sshpass -p &apos;123456&apos; ${HOME}/bin/repo init -u ssh://rdsw@${GITSERVER}/volume1/internal_git/edm/edm-yocto-bsp.git -b sumo-4.14.y_GA-internal -m $MANUSCRIPT
sed -e &quot;s,https://github.com/TechNexion,ssh://rdsw@10.20.30.20/volume1/internal_git/edm,g&quot; -i .repo/manifest.xml
sed -e &quot;s,sumo_4.14.98-2.0.0_GA,sumo_4.14.98-2.0.0_GA-yocto-wip,g&quot; -i .repo/manifest.xml

echo ===== Repo sync yocto from TechNexion github =====
rm -f -R sources/meta-edm-bsp-release
${HOME}/bin/repo sync -j16 -f --force-sync

# Update EULA Agreement Acceptance Config and Create the setup-envronment scripts
echo ===== Update EULA Agreement Acceptance Config and Create the setup-envronment scripts =====
sed -i &apos;:a;N;$!ba;s/EULA_ACCEPTED=\n/echo &quot;ACCEPT_FSL_EULA = \\&quot;1\\&quot;&quot; &gt;&gt; conf\/local.conf\n/&apos; sources/base/setup-environment
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

DLDIR=/home/jenkins/data/src/yocto2.5/download
SSTATEDIR=/home/jenkins/data/src/yocto2.5/sstat

SOMs=(&quot;edm-imx6&quot; &quot;edm-imx7&quot; &quot;pico-imx6&quot; &quot;pico-imx7&quot; &quot;pico-imx8mq&quot; &quot;pico-imx8mm&quot; &quot;edm-imx8mq&quot; &quot;flex-imx8mm&quot;)
DISTROs=(&quot;xwayland&quot;) # &quot;x11&quot; &quot;fb&quot; &quot;wayland&quot; &quot;xwayland&quot;
TGTIMGTYPEs=(&quot;fsl-image-qt5-validation-imx&quot;) # &quot;fsl-image-qt5-validation-imx&quot;) # &quot;core-image-minimal&quot; &quot;core-image-base&quot; &quot;core-image-sato&quot; &quot;fsl-image-machine-test&quot;

# setup environment variables for building
# BASEBOARDs=(&quot;pi&quot; &quot;nymph&quot; &quot;dwarf&quot; &quot;hobbit&quot;)
# DISPLAYs=(&quot;lvds7&quot; &quot;hdmi720p&quot; &quot;hdmi1080p&quot; &quot;lcd&quot; &quot;lvds7_hdmi720p&quot;)
# WLANs=(&quot;qca&quot; &quot;brcm&quot; &quot;ath-pci&quot;)
setup_env_vars () {
  case $1 in
    pico-imx8mq)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    pico-imx8mm)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    edm-imx8mq)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    flex-imx8mm)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      ;;
    pico-imx6)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    pico-imx7)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      ;;
    pico-imx6ul)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    edm-imx6)
      board=&quot;fairy&quot;
      disp=&quot;lvds7&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    edm-imx7)
      board=&quot;gnome&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      ;;
    tep1-imx7)
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      ;;
    tep1-imx6ul)
      ;;
    tek-imx6)
      disp=&quot;lvds10&quot;
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      ;;
    tek3-imx6ul)
      ;;
  	*)
      ;;
  esac
}

# Loop each som distro image_type and configs
for som in ${SOMs[*]}; do
    for distro in ${DISTROs[*]}; do
		# building the yocto with preset config params
        echo &quot;===== Building SOM:$som DISTRO:fsl-imx-$distro TARGET:$target =====&quot;

        # go to workspace for next build
        cd ${WORKSPACE}

        # Set up the build environment variables
        setup_env_vars $som

        # setup yocto build environment
        MACHINE=$som DISTRO=fsl-imx-$distro WIFI_FIRMWARE=y WIFI_MODULE=$wlan DISPLAY=$disp BASEBOARD=$board PANEL=$pan source edm-setup-release.sh -b build-$som

	    # get current build dir and check if local.conf exists
		BUILD_DIR=.
        if [ ! -e $BUILD_DIR/conf/local.conf ]; then
            echo -e &quot;\n ERROR - No build directory is set yet. Run the &apos;setup-environment&apos; script before running this script to create &quot; $BUILD_DIR
            echo -e &quot;\n&quot;
            return 1
        else
            # set the download directory
            [ -d ${DLDIR} ] || mkdir -p ${DLDIR}
            [ -d ${SSTATEDIR} ] || mkdir -p ${SSTATEDIR}
            # setup conf/local.conf
            if grep &quot;^DL_DIR.*&quot; $BUILD_DIR/conf/local.conf &gt; /dev/null ; then
		      sed -e &apos;s|^DL_DIR.*|DL_DIR = &quot;&apos;$DLDIR&apos;&quot;|g&apos; -i $BUILD_DIR/conf/local.conf
            else
		      echo &quot;DL_DIR = \&quot;$DLDIR\&quot;&quot; &gt;&gt; $BUILD_DIR/conf/local.conf
            fi
            if grep &quot;^SSTATE_DIR.*&quot; $BUILD_DIR/conf/local.conf &gt; /dev/null ; then
		      sed -e &apos;s|^SSTATE_DIR.*|SSTATE_DIR = &quot;&apos;$SSTATEDIR&apos;&quot;|g&apos; -i $BUILD_DIR/conf/local.conf
	        else
		      echo &quot;SSTATE_DIR = \&quot;$SSTATEDIR\&quot;&quot; &gt;&gt; $BUILD_DIR/conf/local.conf
	        fi
        fi
        
        # copy the site.conf from ${workspace} for internal git fetch
        cp $WORKSPACE/site.conf $BUILD_DIR/conf/site.conf

		# export out the conf and bitbake environment settings
        cat $BUILD_DIR/conf/local.conf
        cat $BUILD_DIR/conf/bblayers.conf
        cat $BUILD_DIR/conf/site.conf
        export

        # build both fsl-image-validation-imx, fsl-image-qt5-validation-imx images
        for target in ${TGTIMGTYPEs[*]}; do
            # Compile using bitbake
            bitbake $target
        done
    done
done
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>build-*/tmp/deploy/images/*/*.sdcard.*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>Po Cheng &lt;po.cheng@technexion.com&gt;</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>