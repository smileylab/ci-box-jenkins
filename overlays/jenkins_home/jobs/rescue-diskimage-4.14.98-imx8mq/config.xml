<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>build rescue diskimage from SPL, u-boot.img, kernel, and rootfs.cpio.xz for pico-imx8mq</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>5</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.39.1">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/ubuntu</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <jenkins.triggers.ReverseBuildTrigger>
      <spec></spec>
      <upstreamProjects>gen_imx8mq-uboot-with-firmware_uboot-v2018.03-4.14.98,rescue-buildroot-install-modules64-4.14.98</upstreamProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </jenkins.triggers.ReverseBuildTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>rescue-buildroot-install-modules64-4.14.98</project>
      <filter>rescue64/images/rootfs.cpio.xz, rescue64/images/rootfs.cpio</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>gen_imx8mq-uboot-with-firmware_uboot-v2018.03-4.14.98</project>
      <filter>iMX8M/flash.bin</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_tn-kernel-4.14.98-arm64</project>
      <filter>arch/arm64/boot/Image,arch/arm64/boot/dts/freescale/*.dtb,arch/arm64/boot/dts/freescale/overlays/*.dtbo,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_uboot-v2018.03_4.14.98_arm64</project>
      <filter>board/technexion/pico-imx8mq/tnrescue.its,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_uboot-v2018.03_4.14.98_bootscript</project>
      <filter>boot.scr.uimg</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

BLDDIR=/home/jenkins/build/rescue-images
FORMS=(&quot;pico&quot;)
CONFIGS=(&quot;pico-imx8mq&quot;)
BOARDS=(&quot;pi&quot;)

# clear and make /home/jenkins/build/images/ directory to store disk images
[ -d ${BLDDIR} ] &amp;&amp; rm -fr ${BLDDIR}/*{imx8}*.xz || mkdir -p ${BLDDIR}

# work out rootfs, uboot, and kernel image sizes
CPIO_SIZE=$(stat --format %s rescue64/images/rootfs.cpio)
ROOTFS_SIZE=$(stat --format %s rescue64/images/rootfs.cpio.xz)
UBOOT_SIZE=$(stat --format %s iMX8M/flash.bin)
KERNEL_SIZE=$(stat --format %s arch/arm64/boot/Image)
PARTITION_OFFSET=8388608

# work out the boot partition size for rescue image (+ spare 8MB)
RESCUE_SIZE=$(((($ROOTFS_SIZE+$KERNEL_SIZE+$PARTITION_OFFSET)/1048576)+8))
echo &quot;RESCUE IMAGE: Rootfs.cpio.xz: $ROOTFS_SIZE flash.bin: $UBOOT_SIZE Image: $KERNEL_SIZE, Offset: $PARTITION_OFFSET, Rescue: $RESCUE_SIZE&quot;

# work out the demo disk partitions&apos; sizes for demo image (with 8MB spare)
BOOT_SIZE=$(((($KERNEL_SIZE+$PARTITION_OFFSET)/1048576)+8))
BOOT_SECTORS=$((($BOOT_SIZE*1048576)/512))
SYSTEM_SIZE=$((($CPIO_SIZE/1048576)/+16))
SYSTEM_SECTORS=$((($SYSTEM_SIZE*1048575)/512))

DEMO_SIZE=$(((($BOOT_SIZE+$SYSTEM_SIZE)/1048576)+280))
DEMO_SECTORS=$((($DEMO_SIZE*1048576)/512))
echo &quot;DEMO IMAGE: Boot: $BOOT_SIZE System: $SYSTEM_SIZE, Demo: $DEMO_SIZE&quot;



set_uenv_display() {
  # update the uEnv.txt file
  echo &quot;baseboard=${1}&quot; &gt; ./fat/uEnv.txt
  echo &quot;has_m4=0&quot; &gt;&gt; ./fat/uEnv.txt
  case ${1} in
    hobbit)
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800x480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    pi)
      DISP=dsi720x1280
      echo &quot;mmcrootdev=/dev/mmcblk0&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;dispif=dcss&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;panel=ili9881c&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;displayinfo=video=card0-DSI-1:1280x720-24@60&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    nymph)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    dwarf)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tc1000)
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1280x800@60,if=RGB24,bpp=32&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
  	*)
      ;;
  esac
}

set_board() {
  mkdir -p ./fat
  # copy out the rescue image
  cp ${3}_img tn_${1}-${2}_${3}
  # setup the uEnv.txt file
  # set the loopback device using the partition table
  LOOPPATH=($(losetup -P -f --show tn_${1}-${2}_${3}))
  # mount the fat partition to ./fat directory
  mount -t vfat ${LOOPPATH}p1 ./fat
  # setup uEnv.txt display
  set_uenv_display ${2}
  # umount the fat file system
  sync
  umount ./fat
  # un-set the loop device
  losetup -d ${LOOPPATH}
  rm -rf ./fat

  if [ &quot;${3}&quot; == &quot;rescue&quot; ]; then
    # md5 checksum the disk image
    md5sum tn_${1}-${2}_${3} &gt; tn_${1}-${2}_${3}.md5.txt
  fi
  # xz the image and copy out to external volume
  xz -9 tn_${1}-${2}_${3}
  cp tn_${1}-${2}_${3}.xz ${BLDDIR}
  if [ &quot;${3}&quot; == &quot;rescue&quot; ]; then
    # Copy to rescue server directory architecture
    mkdir -p ./${1}/${2}-${DISP}/
    cp tn_${1}-${2}_${3}.xz ./${1}/${2}-${DISP}/${3}.xz
    cp tn_${1}-${2}_${3}.md5.txt ./${1}/${2}-${DISP}/${3}.md5.txt
  fi
}

setup_base_image() {
  # set the loopback device using the partition table
  LOOPPATH=($(losetup -P -f --show ${2}))
  mkdir -p ./fat
  # make the file system for dos partition and mount to ./fat
  mkfs.vfat ${LOOPPATH}p1
  mount -t vfat ${LOOPPATH}p1 ./fat
  if [ &quot;${2}&quot; == &quot;demo_img&quot; ]; then
    mkdir -p ./root
    mkfs.ext4 ${LOOPPATH}p2
    mount -t ext4 ${LOOPPATH}p2 ./root
  fi
  sync

  # copy back the change log
  cp ./changelog* ./fat || :
  # copy the boot.scr.uimg
  cp ./boot.scr.uimg ./fat
  if [ &quot;${2}&quot; == &quot;rescue_img&quot; ]; then
    # make the fit folder and generate FIT image with SPL dd&apos;ed to rescue_img
    mkdir -p ./fit/dtb
    cp rescue64/images/rootfs.cpio.xz ./fit
    cp arch/arm64/boot/Image ./fit
    cp arch/arm64/boot/dts/freescale/*.dtb ./fit/dtb
    cp arch/arm64/boot/dts/freescale/overlays/*.dtbo ./fit/dtb
    cp board/technexion/${1}/tnrescue.its ./fit
    mkimage -f ./fit/tnrescue.its ./fat/tnrescue.itb
    rm -fr ./fit
  else
    cp arch/arm64/boot/Image ./fat
    cp arch/arm64/boot/dts/freescale/*.dtb ./fat
    # cpio the rootfs
    pushd ./root
    cpio -i &lt; ../rescue64/images/rootfs.cpio
    popd
    umount ./root
  fi
  umount ./fat
  (dd if=${WORKSPACE}/iMX8M/flash.bin of=${LOOPPATH} bs=1024 seek=33 oflag=dsync conv=notrunc)
  sync

  # un-set the loop device
  losetup -d ${LOOPPATH}
  rm -rf ./fat
}

# build rescue system disk images
for CONF in ${CONFIGS[@]}; do
  #
  # rescue image
  #
  # create an empty rescue image file
  dd if=/dev/zero of=rescue_img bs=1M count=$RESCUE_SIZE
  # fdisk the partitions in the empty image file
  echo &quot;start=16384, type=c, bootable&quot; | sfdisk rescue_img

  setup_base_image ${CONF} rescue_img
  # setup the uEnv.txt in ./fat for each board types
  for BOARD in ${BOARDS[@]}; do
  	set_board ${CONF} ${BOARD} rescue
  done

  # remove the original disk image
  rm -fr rescue_img

  #
  # demo image
  #
  # create an empty demo image file
  dd if=/dev/zero of=demo_img bs=1M count=$DEMO_SIZE
  sfdisk demo_img &lt;&lt; EOF
start=16384, size=$BOOT_SECTORS, type=c, bootable,
start=$((($BOOT_SECTORS)+1)), type=83,
EOF

  setup_base_image ${CONF} demo_img
  # setup the uEnv.txt in ./fat for each board types
  for BOARD in ${BOARDS[@]}; do
  	set_board ${CONF} ${BOARD} demo
  done

  # remove the original disk image
  rm -fr demo_img

done

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xz,*.md5.txt,pico*/pi*/*.xz,pico*/pi*/*.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>po.cheng@technexion.com</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <jenkins.plugins.publish__over__ftp.BapFtpPublisherPlugin plugin="publish-over-ftp@1.15">
      <consolePrefix>FTP: </consolePrefix>
      <delegate plugin="publish-over@0.22">
        <publishers>
          <jenkins.plugins.publish__over__ftp.BapFtpPublisher plugin="publish-over-ftp@1.15">
            <configName>Rescue FTP</configName>
            <verbose>false</verbose>
            <transfers>
              <jenkins.plugins.publish__over__ftp.BapFtpTransfer>
                <remoteDirectory>/</remoteDirectory>
                <sourceFiles>pico*/pi*/*.xz,pico*/pi*/*.txt</sourceFiles>
                <excludes></excludes>
                <removePrefix></removePrefix>
                <remoteDirectorySDF>false</remoteDirectorySDF>
                <flatten>false</flatten>
                <cleanRemote>false</cleanRemote>
                <noDefaultExcludes>false</noDefaultExcludes>
                <makeEmptyDirs>false</makeEmptyDirs>
                <patternSeparator>[, ]+</patternSeparator>
                <asciiMode>false</asciiMode>
              </jenkins.plugins.publish__over__ftp.BapFtpTransfer>
            </transfers>
            <useWorkspaceInPromotion>false</useWorkspaceInPromotion>
            <usePromotionTimestamp>false</usePromotionTimestamp>
          </jenkins.plugins.publish__over__ftp.BapFtpPublisher>
        </publishers>
        <continueOnError>false</continueOnError>
        <failOnError>false</failOnError>
        <alwaysPublishFromMaster>false</alwaysPublishFromMaster>
        <hostConfigurationAccess class="jenkins.plugins.publish_over_ftp.BapFtpPublisherPlugin" reference="../.."/>
      </delegate>
    </jenkins.plugins.publish__over__ftp.BapFtpPublisherPlugin>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>true</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>