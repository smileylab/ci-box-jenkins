<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build IMX8MM Yocto SUMO with kernel 4.14.98</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>3</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.39.1">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/yocto-develop</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H H * * 6</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>data/${JOB_NAME}</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

set -e

MANUSCRIPT=imx-4.14.98-2.0.0_ga.xml
GITSERVER=&quot;10.20.30.20&quot;
#chmod 0600 ~/.ssh/id_rsa
#ssh-keyscan ${GITSERVER} &gt;&gt; ~/.ssh/known_hosts

# initialize technexion github yocto repository
echo ===== Repo init yocto from TechNexion github =====
${HOME}/bin/repo init -u https://github.com/TechNexion/edm-yocto-bsp.git -b sumo_4.14.y_GA -m $MANUSCRIPT
#sshpass -p &apos;123456&apos; ${HOME}/bin/repo init -u ssh://rdsw@${GITSERVER}/volume1/internal_git/edm/edm-yocto-bsp.git -b sumo-4.14.y_GA -m $MANUSCRIPT
#${HOME}/bin/repo init -u ssh://rdsw@${GITSERVER}/volume1/internal_git/edm/edm-yocto-bsp.git -b sumo-4.14.y_GA-internal -m $MANUSCRIPT
echo ===== Repo sync yocto from TechNexion github =====
rm -fR sources/meta-edm-bsp-release
${HOME}/bin/repo sync -j16 -f --force-sync

# Update EULA Agreement Acceptance Config and Create the setup-envronment scripts
echo ===== Update EULA Agreement Acceptance Config and Create the setup-envronment scripts =====
sed -i &apos;:a;N;$!ba;s/EULA_ACCEPTED=\n/echo &quot;ACCEPT_FSL_EULA = \\&quot;1\\&quot;&quot; &gt;&gt; conf\/local.conf\n/&apos; sources/base/setup-environment
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

cat &gt; site.conf &lt;&lt;EOF
# u-boot-edm.bb
#SRCSERVER_pn-u-boot-edm = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCBRANCH_pn-u-boot-edm = &quot;tn-imx_v2018.03_4.14.98_2.0.0_ga-wip-bootscript&quot;
#SRCOPTIONS_pn-u-boot-edm = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-u-boot-edm = &quot;048fa2fd96c898c4cc9e12219cba2a4f00ceef52&quot;

# u-boot-script.bb
#SRCSERVER_pn-u-boot-script = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCOPTIONS_pn-u-boot-script = &quot;;protocol=ssh;user=rdsw&quot;

# linux-firmware-brcm-tn.bb
SRCSERVER_pn-linux-firmware-brcm-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/brcm_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-brcm-tn = &quot;master&quot;
SRCOPTIONS_pn-linux-firmware-brcm-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-brcm-tn = &quot;317394ca84258e4f11a138014820eebf0c43db1e&quot;
SRC_URI_pn-linux-firmware-brcm-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-brcm-tn = &quot;\${WORKDIR}/git&quot;

# linux-firmware-qca-tn.bb
SRCSERVER_pn-linux-firmware-qca-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/qca_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-qca-tn = &quot;caf-wlan/CNSS.LEA.NRT_3.0&quot;
SRCOPTIONS_pn-linux-firmware-qca-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-qca-tn = &quot;8faa87a6e6bbb0a5c16591e8b0adf0514cb33444&quot;
SRC_URI_pn-linux-firmware-qca-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-qca-tn = &quot;\${WORKDIR}/git&quot;

# linux-tn-imx.bb
#KERNEL_SRC_pn-linux-tn-imx = &quot;git://10.20.30.20:/volume1/internal_git/edm/tn-kernel.git&quot;
#SRCBRANCH_pn-linux-tn-imx = &quot;tn-imx_4.14.98_2.0.0_ga-wip-sdmafix&quot;
#SRCOPTIONS_pn-linux-tn-imx = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-linux-tn-imx = &quot;5b97eae48fd356d280815cb6088eff79570735f9&quot;
#SRC_URI_pn-linux-tn-imx = &quot;\${KERNEL_SRC};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
EOF
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

#set -e

#source sources/meta-fsl-bsp-release/imx/tools/setup-utils.sh

DATE=$(date +%Y%m%d)
OUTDIR=/home/jenkins/build/yocto2.5-images
CACHEDIR=/home/jenkins/data/src/yocto2.5/ccache
DLDIR=/home/jenkins/data/src/yocto2.5/download
SSTATEDIR=/home/jenkins/data/src/yocto2.5/sstat

# the following settings has to be build.
MACHINEs=(&quot;pico-imx8mm&quot;) # &quot;pico-imx7&quot; &quot;pico-imx6&quot;)
DISTROs=(&quot;fsl-imx-xwayland&quot;) # &quot;fsl-imx-wayland&quot; &quot;fsl-imx-xwayland&quot; &quot;fsl-imx-x11&quot; &quot;fsl-imx-fb&quot;)
WLANs=&quot;qca&quot; #(&quot;qca&quot; &quot;brcm&quot; &quot;all&quot;)
TGTIMGTYPEs=(&quot;fsl-image-qt5-validation-imx&quot;) # &quot;fsl-image-validation-imx&quot; &quot;core-image-minimal&quot; &quot;core-image-base&quot; &quot;core-image-sato&quot; &quot;fsl-image-machine-test&quot;

# the followings are uEnv.txt settings
BASEBOARD=(&quot;pi&quot;) # &quot;nymph&quot; &quot;dwarf&quot; &quot;hobbit&quot;
DISPLAY=(&quot;mipi5&quot;) # &quot;lvds7&quot; &quot;hdmi720p&quot; &quot;hdmi1080p&quot; &quot;lcd&quot; &quot;lvds7_hdmi720p&quot; &quot;custom&quot; &quot;mipi5&quot; &quot;hdmi&quot;

# Sets the META_FSL_BSP_RELEASE folder
META_FSL_BSP_RELEASE=&quot;${WORKSPACE}/sources/meta-fsl-bsp-release/imx/meta-bsp&quot;

# clear output directory
[ -d ${OUTDIR} ] || mkdir -p ${OUTDIR}

# clear and make download/sstate-cache/build folder on external volume
[ -d ${DLDIR} ] || mkdir -p ${DLDIR}
[ -d ${CACHEDIR} ] || mkdir -p ${CACHEDIR}
[ -d ${SSTATEDIR} ] || mkdir -p ${SSTATEDIR}

# setup display resolutions
setup_resolution () {
	if [ &quot;$1&quot; = &quot;mipi5&quot; ]; then
    	RESO=dsi720x1280
    elif [ &quot;$1&quot; = &quot;hdmi&quot; ]; then
    	RESO=hdmi1920x1080
    elif [ &quot;$1&quot; = &quot;lcd&quot; ]; then
    	RESO=lcd800x480
    fi;
}

# update ./conf/local.conf setting
setup_local_conf () {
	CURDIR=.

    if grep &quot;^DL_DIR.*&quot; $CURDIR/conf/local.conf &gt; /dev/null ; then
		sed -e &apos;s|^DL_DIR.*|DL_DIR = &quot;&apos;$DLDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    else
		echo &quot;DL_DIR = \&quot;$DLDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    fi
    if grep &quot;^SSTATE_DIR.*&quot; $CURDIR/conf/local.conf &gt; /dev/null ; then
		sed -e &apos;s|^SSTATE_DIR.*|SSTATE_DIR = &quot;&apos;$SSTATEDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
	else
		echo &quot;SSTATE_DIR = \&quot;$SSTATEDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
	fi

	echo ===== ./conf/local.conf =====
	cat $CURDIR/conf/local.conf
	unset CURDIR
}

# update ./conf/bblayer.conf setting
setup_bblayer_conf () {
	CURDIR=.

	# Support integrating community meta-freescale instead of meta-fsl-arm
	if [ -d ../sources/meta-freescale ]; then
		echo meta-freescale directory found
		# Change settings according to environment
		sed -e &quot;s,meta-fsl-arm\s,meta-freescale ,g&quot; -i $CURDIR/conf/bblayers.conf
		sed -e &quot;s,\$.BSPDIR./sources/meta-fsl-arm-extra\s,,g&quot; -i $CURDIR/conf/bblayers.conf
	fi
	echo ===== ./conf/bblayers.conf =====
	cat $CURDIR/conf/bblayers.conf
	unset CURDIR
}

# build the yocto image
build_yocto () {
	# building the yocto with preset config params
	echo ===== Building SOM:$1 DISTRO:$2 TARGET:$3 WIFI:$WLANs =====

	# go to workspace for next build
	cd ${WORKSPACE}

	# Set up the basic yocto environment
	# NOTE: setup-environment shell script change build directory to
    # /home/jenkins/build/src/build/pico-imx8m/fsl-imx-$distro/fsl-image-validation-imx/wifi-y
    MACHINE=$1 DISTRO=$2 source ./setup-environment build-$1

	# setup ./conf/local.conf
	if [ ! -e ./conf/local.conf ]; then
		echo -e &quot;\n ERROR - No local.conf, Run the &apos;setup-environment&apos; script again\n&quot;
		return 1
    else
		setup_local_conf
	fi

	# setup ./conf/bblayers.conf
    if [ ! -e ./conf/bblayers.conf ]; then
		echo -e &quot;\n ERROR - No bblayers.conf, Run the &apos;setup-environment&apos; script again\n&quot;
		return 1
    else
    	setup_bblayer_conf
    fi

    # setup uEnv.txt parameters
    export BASE_BOARD=$BASEBOARD
    export RF_FIRMWARES=$WLANs
    export DISPLAY_INFO=$DISPLAY
    export DISPLAY_PANEL=ili9881c
    export BB_ENV_EXTRAWHITE=&quot;$BB_ENV_EXTRAWHITE BASE_BOARD DISPLAY_INFO DISPLAY_PANEL RF_FIRMWARES&quot;
    echo &quot;$(pwd)&quot;

	# copy the site.conf to get qca firmware from internal git
	cp ${WORKSPACE}/site.conf ./conf/site.conf

	# Build using bitbake
	bitbake $3

	ls -al ./tmp/deploy/images/$1
	# archive target image
	if [ -f ./tmp/deploy/images/$1/$3-$1.sdcard.xz ]; then
		cp ./tmp/deploy/images/$1/$3-$1.sdcard.xz $OUTDIR/$1_${BASEBOARD}_yocto-2.5_$DISPLAY_$DATE.sdcard.xz
        # figure out where to put image files
		setup_resolution $DISPLAY
    	echo Archive yocto disk image
        rm -rf $WORKSPACE/$1/*sdcard.*
        mkdir -p $WORKSPACE/$1/$BASEBOARD-$RESO
        cp ./tmp/deploy/images/$1/$3-$1.sdcard.xz $WORKSPACE/$1/$1_${BASEBOARD}_yocto-2.5_$DISPLAY_$DATE.sdcard.xz
        cp ./tmp/deploy/images/$1/$3-$1.sdcard.xz $WORKSPACE/$1/$BASEBOARD-$RESO/yocto-2.5.xz
	fi
}

# loop targets
loop_targets () {
	for target in ${TGTIMGTYPEs[*]}; do
    	build_yocto $1 $2 $target
    done
}

# loop distros
loop_distros () {
	for distro in ${DISTROs[*]}; do
    	loop_targets $1 $distro
    done
}

# build loops to build all necessary combinations
for som in ${MACHINEs[*]}; do
	loop_distros $som
done
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>build*/tmp/deploy/images/*/*.xz,*imx*/*.xz,*imx*/*-*/*.xz</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>true</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <jenkins.plugins.publish__over__ftp.BapFtpPublisherPlugin plugin="publish-over-ftp@1.15">
      <consolePrefix>FTP: </consolePrefix>
      <delegate plugin="publish-over@0.22">
        <publishers>
          <jenkins.plugins.publish__over__ftp.BapFtpPublisher plugin="publish-over-ftp@1.15">
            <configName>Rescue FTP</configName>
            <verbose>false</verbose>
            <transfers>
              <jenkins.plugins.publish__over__ftp.BapFtpTransfer>
                <remoteDirectory>/</remoteDirectory>
                <sourceFiles>*imx*/*-*/yocto-2.5.xz</sourceFiles>
                <excludes></excludes>
                <removePrefix></removePrefix>
                <remoteDirectorySDF>false</remoteDirectorySDF>
                <flatten>false</flatten>
                <cleanRemote>false</cleanRemote>
                <noDefaultExcludes>false</noDefaultExcludes>
                <makeEmptyDirs>false</makeEmptyDirs>
                <patternSeparator>[, ]+</patternSeparator>
                <asciiMode>false</asciiMode>
              </jenkins.plugins.publish__over__ftp.BapFtpTransfer>
            </transfers>
            <useWorkspaceInPromotion>false</useWorkspaceInPromotion>
            <usePromotionTimestamp>false</usePromotionTimestamp>
          </jenkins.plugins.publish__over__ftp.BapFtpPublisher>
        </publishers>
        <continueOnError>false</continueOnError>
        <failOnError>false</failOnError>
        <alwaysPublishFromMaster>false</alwaysPublishFromMaster>
        <hostConfigurationAccess class="jenkins.plugins.publish_over_ftp.BapFtpPublisherPlugin" reference="../.."/>
      </delegate>
    </jenkins.plugins.publish__over__ftp.BapFtpPublisherPlugin>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>Po Cheng &lt;po.cheng@technexion.com&gt;</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>