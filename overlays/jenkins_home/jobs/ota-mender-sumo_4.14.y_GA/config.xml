<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Yocto (Sumo) Kernel: 4.14.98 Uboot: 2018.03 from github stable</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>3</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>tn/builder</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

cat &gt; site.conf &lt;&lt;EOF
BB_GIT_SHALLOW ?= &quot;1&quot;
BB_GIT_SHALLOW_DEPTH ?= &quot;1&quot;
# Usage in a recipe with multiple named uris or multiple named branches
BB_GIT_SHALLOW_DEPTH_doc = &quot;&quot;

# u-boot-edm.bb
#SRCSERVER_pn-u-boot-edm = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCBRANCH_pn-u-boot-edm = &quot;tn-imx_v2018.03_4.14.98_2.0.0_ga-wip&quot;
#SRCOPTIONS_pn-u-boot-edm = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-u-boot-edm = &quot;19dad2a3813e92f2d9b1b747211ffd9f8d31968b&quot;
#SRC_URI_pn-u-boot-edm = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# u-boot-script.bb
#SRCSERVER_pn-u-boot-script = &quot;git://10.20.30.20/volume1/internal_git/edm/uboot-imx-edm.git&quot;
#SRCOPTIONS_pn-u-boot-script = &quot;;protocol=ssh;user=rdsw&quot;

# linux-firmware-brcm-tn.bb
SRCSERVER_pn-linux-firmware-brcm-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/brcm_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-brcm-tn = &quot;master&quot;
SRCOPTIONS_pn-linux-firmware-brcm-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-brcm-tn = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-firmware-brcm-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-brcm-tn = &quot;\${WORKDIR}/git&quot;

# linux-firmware-qca-tn.bb
SRCSERVER_pn-linux-firmware-qca-tn = &quot;git://10.20.30.20/volume1/internal_git/edm/qca_firmware.git&quot;
SRCBRANCH_pn-linux-firmware-qca-tn = &quot;caf-wlan/CNSS.LEA.NRT_3.0&quot;
SRCOPTIONS_pn-linux-firmware-qca-tn = &quot;;protocol=ssh;user=rdsw&quot;
SRCREV_pn-linux-firmware-qca-tn = &quot;\${AUTOREV}&quot;
SRC_URI_pn-linux-firmware-qca-tn = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
S_pn-linux-firmware-qca-tn = &quot;\${WORKDIR}/git&quot;

# linux-tn-imx.bb
#SRCSERVER_pn-linux-tn-imx = &quot;git://10.20.30.20/volume1/internal_git/edm/tn-kernel.git&quot;
#SRCBRANCH_pn-linux-tn-imx = &quot;tn-imx_4.14.98_2.0.0_ga-wip&quot;
#SRCOPTIONS_pn-linux-tn-imx = &quot;;protocol=ssh;user=rdsw&quot;
#SRCREV_pn-linux-tn-imx = &quot;d58d03da0123b1e2ef2854d66c2bc6580c901bbe&quot;
#SRC_URI_pn-linux-tn-imx = &quot;\${SRCSERVER};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;
# Remove the upstream history from our kernel repo, keeping our own
#BB_GIT_SHALLOW_REVS_pn-linux-tn-imx = &quot;d58d03da0123b1e2ef2854d66c2bc6580c901bbe&quot;
#BB_GIT_SHALLOW_DEPTH_pn-linux-tn-imx = &quot;&quot;
# Keep the branches in linux-tn-imx repositories
#BB_GIT_SHALLOW_TRIM_REFS_pn-linux-tn-imx = &quot;0&quot;

# afloader.bb
#TECHNEXION_GITHUB_MIRROR_pn-afloader = &quot;git://10.20.30.20/volume1/internal_git/fpga/afloader.git&quot;
#SRCOPTIONS_pn-afloader = &quot;;protocol=ssh;user=rdsw&quot;
#SRC_URI_pn-afloader = &quot;\${TECHNEXION_GITHUB_MIRROR};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

# axonfabric-firmware.bb
#TECHNEXION_GITHUB_MIRROR_pn-axonfabric-firmware = &quot;git://10.20.30.20/volume1/internal_git/fpga/axonfabric-firmware.git&quot;
#SRCOPTIONS_pn-axonfabric-firmware = &quot;;protocol=ssh;user=rdsw&quot;
#SRC_URI_pn-axonfabric-firmware = &quot;\${TECHNEXION_GITHUB_MIRROR};branch=\${SRCBRANCH}\${SRCOPTIONS}&quot;

#IMAGE_INSTALL += &quot;lsof grep&quot;
EOF

cat &gt; local_manifest.xml &lt;&lt;EOF
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;manifest&gt;
  &lt;remote name=&quot;internal&quot; fetch=&quot;ssh://rdsw@10.20.30.20/volume1/internal_git/edm&quot; /&gt;

  &lt;remove-project name=&quot;meta-tn-imx-bsp&quot; /&gt;
  &lt;project name=&quot;meta-tn-imx-bsp&quot; remote=&quot;tn-bsp&quot; path=&quot;sources/meta-tn-imx-bsp&quot; revision=&quot;sumo_4.14.98-2.0.0_GA-next&quot; &gt;
     &lt;linkfile src=&quot;tools/edm-setup-release.sh&quot; dest=&quot;edm-setup-release.sh&quot;/&gt;
     &lt;linkfile src=&quot;README&quot; dest=&quot;README-TechNexion-BSP&quot;/&gt;
  &lt;/project&gt;
&lt;/manifest&gt;
EOF

#sed -e &quot;s,https://github.com/TechNexion,ssh://rdsw@10.20.30.20/volume1/internal_git,g&quot; -i .repo/manifests/${MANUSCRIPT}
#sed -e &quot;s,=\&quot;meta-mender-community\&quot; remote=\&quot;mender\&quot;,=\&quot;mender/meta-mender-community\&quot; remote=\&quot;tn-bsp\&quot;,g&quot; -i .repo/manifests/${MANUSCRIPT}
#sed -e &quot;s,=\&quot;meta-tn-imx-bsp,=\&quot;edm/meta-tn-imx-bsp,g&quot; -i .repo/manifests/${MANUSCRIPT}
#sed -e &quot;s,sumo_4.14.98-2.0.0_GA-stable,sumo_4.14.98-2.0.0_GA-next,g&quot; -i .repo/manifests/${MANUSCRIPT}</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

CHANGELOG_TN=CHANGELOG_TN

MANUSCRIPT=meta-mender-technexion/scripts/manifest-technexion.xml

GITSERVER=&quot;10.20.30.20&quot;
GITMIRROR=&quot;10.88.88.8&quot;
chmod 0600 ~/.ssh/id_rsa
ssh-keyscan ${GITSERVER} &gt;&gt; ~/.ssh/known_hosts
ssh-keyscan ${GITMIRROR} &gt;&gt; ~/.ssh/known_hosts

rm -rf sources/*

# initialize technexion github yocto repository
echo ===== Repo init yocto from TechNexion github =====
${HOME}/bin/repo init -u https://github.com/TechNexion-customization/meta-mender-community.git -b sumo -m $MANUSCRIPT
#${HOME}/bin/repo init -u ssh://rdsw@${GITSERVER}/volume1/internal_git/mender/meta-mender-community.git -b sumo -m $MANUSCRIPT

# use local manifests to override existing projects
mkdir -p .repo/local_manifests/
cp ./local_manifest.xml .repo/local_manifests/

echo ===== Repo sync yocto from TechNexion github =====
rm -f -R sources/meta-tn-imx-bsp
rm -f -R sources/meta-mender-community
${HOME}/bin/repo sync --force-sync

# Update EULA Agreement Acceptance Config and Create the setup-envronment scripts
echo ===== Update EULA Agreement Acceptance Config and Create the setup-envronment scripts =====
sed -i &apos;:a;N;$!ba;s/EULA_ACCEPTED=\n/echo &quot;ACCEPT_FSL_EULA = \\&quot;1\\&quot;&quot; &gt;&gt; conf\/local.conf\n/&apos; sources/base/setup-environment

# technexion release note and change log
cd ${WORKSPACE}/sources/meta-tn-imx-bsp
git log --oneline &gt; changelog
ln -s ${WORKSPACE}/sources/meta-tn-imx-bsp/changelog ${WORKSPACE}/${CHANGELOG_TN}
#cp ${WORKSPACE}/sources/meta-tn-imx-bsp/RELEASENOTES_TN ${WORKSPACE}/

cat ${WORKSPACE}/${CHANGELOG_TN}
#cat ${WORKSPACE}/RELEASENOTES_TN

# setup yocto sstate cache and download directories
DLDIR=/home/jenkins/workspace/src/yocto2.5/downloads
SSTATEDIR=/home/jenkins/workspace/src/yocto2.5/sstate-cache

# &quot;pico-imx6&quot; &quot;pico-imx8mq&quot; &quot;pico-imx7&quot; &quot;edm-imx6&quot; &quot;edm-imx7&quot; &quot;pico-imx8mm&quot; &quot;edm-imx8mq&quot; &quot;flex-imx8mm&quot;) # &quot;tep1-imx7&quot; &quot;xore-imx8mm&quot; &quot;axon-imx6&quot; &quot;axon-imx8mm&quot;
SOMs=(&quot;pico-imx8mm&quot;)
DISTROs=(&quot;fsl-imx-xwayland&quot; &quot;b2qt&quot; &quot;virtualization&quot;) # &quot;x11&quot; &quot;fb&quot; &quot;wayland&quot; &quot;xwayland&quot;)
TGTIMGTYPEs=(&quot;core-image-base&quot; &quot;fsl-image-qt5-validation-imx&quot;) # &quot;core-image-full-cmdline&quot;)

# setup environment variables for building
# BASEBOARDs=(&quot;pi&quot; &quot;nymph&quot; &quot;dwarf&quot; &quot;hobbit&quot;)
# DISPLAYs=(&quot;lvds7&quot; &quot;hdmi720p&quot; &quot;hdmi1080p&quot; &quot;lcd&quot; &quot;lvds7_hdmi720p&quot;)
# WLANs=(&quot;qca&quot; &quot;brcm&quot; &quot;ath-pci&quot;)
setup_env_vars () {
  case $1 in
    pico-imx8mq)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      nfc=&quot;nfc&quot;
      ;;
    pico-imx8mm)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    edm-imx8mq)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    flex-imx8mm)
      board=&quot;wizard&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    axon-imx8mm)
      board=&quot;pi&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    xore-imx8mm)
      board=&quot;wizard&quot;
      disp=&quot;mipi5&quot;
      wlan=&quot;qca&quot;
      pan=&quot;ili9881c&quot;
      distro=&quot;fsl-imx-xwayland&quot;
      ;;
    pico-imx6)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    pico-imx6ul)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    pico-imx7)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    pico-imx6ul)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    edm-imx6)
      board=&quot;fairy&quot;
      disp=&quot;lvds7&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    edm-imx7)
      board=&quot;gnome&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    axon-imx6)
      board=&quot;pi&quot;
      disp=&quot;lcd&quot;
      wlan=&quot;qca&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tep1-imx7)
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tep1-imx6ul)
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tek-imx6)
      disp=&quot;lvds10&quot;
      wlan=&quot;ath-pci&quot;
      pan=&quot;&quot;
      distro=&quot;fsl-imx-x11&quot;
      ;;
    tek3-imx6ul)
      distro=&quot;fsl-imx-x11&quot;
      ;;
  	*)
      ;;
  esac
}

setup_target_vars () {
  case $1 in
    &quot;b2qt&quot;)
      tgt=&quot;b2qt-embedded-qt5-image&quot;
      distro=&quot;b2qt&quot;
      ;;
    &quot;virtualization&quot;)
      tgt=&quot;tn-image-docker-os&quot;
      distro=&quot;virtualization&quot;
      ;;
  	*)
      tgt=&quot;fsl-image-qt5-validation-imx&quot;
      ;;
  esac
}

# update ./conf/local.conf setting
setup_local_conf () {
	CURDIR=.

	# Setup the download and sstate-cache directories for faster build
    if grep &quot;^DL_DIR.*&quot; $CURDIR/conf/local.conf &gt; /dev/null ; then
		sed -e &apos;s|^DL_DIR.*|DL_DIR = &quot;&apos;$DLDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    else
		echo &quot;DL_DIR = \&quot;$DLDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    fi
    if grep &quot;^SSTATE_DIR.*&quot; $CURDIR/conf/local.conf &gt; /dev/null ; then
		sed -e &apos;s|^SSTATE_DIR.*|SSTATE_DIR = &quot;&apos;$SSTATEDIR&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
	else
		echo &quot;SSTATE_DIR = \&quot;$SSTATEDIR\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
	fi

    sed -e &apos;s|^NFC.*|NFC = &quot;&quot;|g&apos; -i $CURDIR/conf/local.conf
    echo &quot;PA_TOKEN ?= \&quot;SbtQ_mC4fvJRA88_9jB7\&quot;&quot; &gt;&gt; ./conf/local.conf

    sed -e &apos;s|^MENDER_ARTIFACT_NAME.*|MENDER_ARTIFACT_NAME = &quot;&apos;$artifact_name&apos;&quot;|g&apos; -i $CURDIR/conf/local.conf
    echo &quot;PACKAGE_CLASSES += \&quot;package-mender-artifacts\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    echo &quot;MENDER_ARTIFACT_PACKAGES = \&quot;zip\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    #echo &quot;IMAGE_FSTYPES_append_&quot;$1&quot; = \&quot; sdimg.gz\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf

    if [ &quot;$2&quot; = &quot;virtualization&quot; ]; then
      echo &quot;JENKINS_HOMEDIR = \&quot;/home/admin/jenkins_home\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
      echo &quot;TN_CONTAINER_IMAGE = \&quot;tn-container-image-lighttpd\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
      echo &quot;TN_DOCKER_PARTITION_IMAGE = \&quot;docker-data-partition.img\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
      echo &quot;TN_DOCKER_PARTITION_MOUNT = \&quot;/data/docker\&quot;&quot; &gt;&gt; $CURDIR/conf/local.conf
    fi

	echo ===== ./conf/local.conf =====
	cat $CURDIR/conf/local.conf
	unset CURDIR
}

# update ./conf/bblayer.conf setting
setup_bblayer_conf () {
	CURDIR=.

	# Support integrating community meta-freescale instead of meta-fsl-arm
	if [ -d ../sources/meta-freescale ]; then
		echo meta-freescale directory found
		# Change settings according to environment
		sed -e &quot;s,meta-fsl-arm\s,meta-freescale ,g&quot; -i $CURDIR/conf/bblayers.conf
		sed -e &quot;s,\$.BSPDIR./sources/meta-fsl-arm-extra\s,,g&quot; -i $CURDIR/conf/bblayers.conf
	fi
	echo ===== ./conf/bblayers.conf =====
	cat $CURDIR/conf/bblayers.conf
	unset CURDIR
}

# build the yocto image
build_yocto () {
	# go to workspace for next build
	cd ${WORKSPACE}
    
    # remove build directory
    rm -fr build-$1

    # Set up the build environment variables
    setup_env_vars $1
    setup_target_vars $2

	# building the yocto with preset config params
	echo ===== Building SOM:$1 DISTRO:$2 TARGET:$tgt =====

    artifact_name=&quot;$tgt-$1-${BUILD_NUMBER}&quot;

	# Set up the basic yocto environment
	# NOTE: setup-environment shell script change build directory to
    # /home/jenkins/build/src/build/pico-imx8m/fsl-imx-$distro/fsl-image-validation-imx/wifi-y
    MACHINE=$1 DISTRO=$distro source ./setup-environment technexion || :

	# setup ./conf/local.conf
	if [ ! -e ./conf/local.conf ]; then
		echo -e &quot;\n ERROR - No local.conf, Run the &apos;setup-environment&apos; script again\n&quot;
		return 1
    else
		setup_local_conf $1 $distro
	fi

	# setup ./conf/bblayers.conf
    if [ ! -e ./conf/bblayers.conf ]; then
		echo -e &quot;\n ERROR - No bblayers.conf, Run the &apos;setup-environment&apos; script again\n&quot;
		return 1
    else
    	setup_bblayer_conf $distro
    fi

    # setup uEnv.txt parameters
    export BASE_BOARD=$board
    export RF_FIRMWARES=$wlan
    export DISPLAY_INFO=$disp
    export DISPLAY_PANEL=$pan
    export BB_ENV_EXTRAWHITE=&quot;$BB_ENV_EXTRAWHITE BASE_BOARD DISPLAY_INFO DISPLAY_PANEL RF_FIRMWARES&quot;
    export

	# copy the site.conf to get qca firmware from internal git
	cp ${WORKSPACE}/site.conf ./conf/site.conf
    cat ./conf/site.conf

	# Build using bitbake
    bitbake u-boot-edm -c cleanall
    bitbake linux-tn-imx -c cleanall
    if [ &quot;$2&quot; = &quot;virtualization&quot; ]; then
      bitbake multiconfig:container:tn-container-image-lighttpd -c cleanall
	  bitbake multiconfig:container:tn-container-image-lighttpd
    fi
    bitbake $tgt -c cleanall
	bitbake $tgt

    if [ &quot;$2&quot; = &quot;virtualization&quot; ]; then
      bitbake mender-docker-artifacts
    fi
    bitbake zip

    cp -fr ${WORKSPACE}/build-$1/tmp/deploy ${WORKSPACE}/
}

# loop distros
loop_distros () {
	for dist in ${DISTROs[*]}; do
    	build_yocto $1 $dist
    done
}

# build loops to build all necessary combinations
for som in ${SOMs[*]}; do
	loop_distros $som
done
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>deploy/images/*/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>Po Cheng &lt;po.cheng@technexion.com&gt;</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>true</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>