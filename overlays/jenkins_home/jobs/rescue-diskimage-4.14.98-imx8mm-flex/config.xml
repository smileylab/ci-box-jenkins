<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>build rescue diskimage from SPL, u-boot.img, kernel, and rootfs.cpio.xz for flex-imx8mm</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>5</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/ubuntu</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <jenkins.triggers.ReverseBuildTrigger>
      <spec></spec>
      <upstreamProjects>gen_imx8mm-uboot-with-firmware_uboot-v2018.03-4.14.98-flex,rescue-buildroot-install-modules64-4.14.98</upstreamProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </jenkins.triggers.ReverseBuildTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>rescue-buildroot-install-modules64-4.14.98</project>
      <filter>rescue64/images/rootfs.cpio.xz</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>gen_imx8mm-uboot-with-firmware_uboot-v2018.03-4.14.98-flex</project>
      <filter>iMX8M/flash.bin</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_tn-kernel-4.14.98-arm64</project>
      <filter>arch/arm64/boot/Image,arch/arm64/boot/dts/freescale/*.dtb,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_uboot-v2018.03_4.14.98_arm64</project>
      <filter>board/technexion/flex-imx8mm/tnrescue.its,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_uboot-v2018.03_4.14.98_bootscript</project>
      <filter>boot.scr.uimg</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

set -e

BLDDIR=/home/jenkins/build/rescue-images
FORMS=(&quot;pico&quot;)
CONFIGS=(&quot;flex-imx8mm&quot;)
BOARDS=(&quot;pi&quot;)

# clear and make /home/jenkins/build/images/ directory to store disk images
[ -d ${BLDDIR} ] &amp;&amp; rm -fr ${BLDDIR}/*{imx8}*.xz || mkdir -p ${BLDDIR}

# gets the xz file size
ROOTFS_SIZE=$(stat --format %s rescue64/images/rootfs.cpio.xz)
UBOOT_SIZE=$(stat --format %s iMX8M/flash.bin)
KERNEL_SIZE=$(stat --format %s arch/arm64/boot/Image)
PARTITION_OFFSET=8388608
DISK_SIZE=$(((((($ROOTFS_SIZE+$KERNEL_SIZE+$PARTITION_OFFSET)/1048576)/8)+1)*8))
echo &quot;Rootfs: $ROOTFS_SIZE Uboot: $UBOOT_SIZE Kernel: $KERNEL_SIZE, PartOffset: $PARTITION_OFFSET, Disk: $DISK_SIZE&quot;

set_uenv_display() {
  echo &quot;has_m4=0&quot; &gt;&gt; ./fat/uEnv.txt
  case $1 in
    hobbit)
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800×480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    pi)
      DISP=dsi720x1280
      echo &quot;panel=ili9881c&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800×480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    nymph)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    dwarf)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tc1000)
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1280x800@60,if=RGB24,bpp=32&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
  	*)
      ;;
  esac
}

set_board() {
    # copy out the xz disk image
    cp rescue_img tn_${1}-${2}_rescue
	# setup the uEnv.txt file
    # set the loopback device using the partition table
    LOOPPATH=($(losetup -P -f --show tn_${1}-${2}_rescue))
    # mount the fat partition to ./fat directory
    mount -t vfat ${LOOPPATH}p1 ./fat
    # update the uEnv.txt file
    echo &quot;baseboard=${2}&quot; &gt; ./fat/uEnv.txt
    # setup uEnv.txt display
    set_uenv_display ${2}
    # umount the fat file system
    umount ./fat
    # un-set the loop device
    losetup -d ${LOOPPATH}
    # md5 checksum the disk image
    md5sum tn_${1}-${2}_rescue &gt; tn_${1}-${2}_rescue.md5.txt
    # xz the image and copy out to external volume
    xz -9 tn_${1}-${2}_rescue
    cp tn_${1}-${2}_rescue.xz ${BLDDIR}
    mkdir -p ./${1}/${2}-${DISP}/
    cp tn_${1}-${2}_rescue.xz ./${1}/${2}-${DISP}/rescue.xz
    cp tn_${1}-${2}_rescue.md5.txt ./${1}/${2}-${DISP}/rescue.md5.txt
}

# build rescue system disk images
mkdir -p ./fat
for CONF in ${CONFIGS[@]}; do
  # create an empty image file
  dd if=/dev/zero of=rescue_img bs=1M count=$DISK_SIZE
  # fdisk the partitions in the empty image file
  echo &quot;start=16384, type=c, bootable&quot; | sfdisk rescue_img

  # set the loopback device using the partition table
  LOOPPATH=($(losetup -P -f --show rescue_img))
  sync

  # make the file system for dos partition and mount to ./fat
  mkfs.vfat ${LOOPPATH}p1
  mount -t vfat ${LOOPPATH}p1 ./fat

  # copy back the change log
  cp ./changelog* ./fat || :
  # copy boot.scr.uimg
  cp ./boot.scr.uimg ./fat
  # make the fit folder and generate FIT image with SPL dd&apos;ed to rescue_img
  mkdir -p ./fit/dtb
  cp rescue64/images/rootfs.cpio.xz ./fit
  cp arch/arm64/boot/Image ./fit
  cp arch/arm64/boot/dts/freescale/*.dtb ./fit/dtb
  cp board/technexion/${CONF}/tnrescue.its ./fit
  mkimage -f ./fit/tnrescue.its ./fat/tnrescue.itb
  rm -fr ./fit
  umount ./fat
  (dd if=${WORKSPACE}/iMX8M/flash.bin of=${LOOPPATH} bs=1024 seek=33 oflag=dsync conv=notrunc)
  sync

  # un-set the loop device
  losetup -d ${LOOPPATH}
  
  # setup the uEnv.txt in ./fat for each board types
  for BOARD in ${BOARDS[@]}; do
  	set_board ${CONF} ${BOARD}
  done

  # remove the original disk image
  rm -fr rescue_img
done
rm -fr ./fat
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xz,*.md5.txt,flex*/pi*/*.xz,flex*/pi*/*.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <jenkins.plugins.publish__over__ftp.BapFtpPublisherPlugin plugin="publish-over-ftp@1.15">
      <consolePrefix>FTP: </consolePrefix>
      <delegate plugin="publish-over@0.22">
        <publishers>
          <jenkins.plugins.publish__over__ftp.BapFtpPublisher plugin="publish-over-ftp@1.15">
            <configName>Rescue FTP</configName>
            <verbose>false</verbose>
            <transfers>
              <jenkins.plugins.publish__over__ftp.BapFtpTransfer>
                <remoteDirectory>/</remoteDirectory>
                <sourceFiles>flex*/pi*/*.xz,flex*/pi*/*.txt</sourceFiles>
                <excludes></excludes>
                <removePrefix></removePrefix>
                <remoteDirectorySDF>false</remoteDirectorySDF>
                <flatten>false</flatten>
                <cleanRemote>false</cleanRemote>
                <noDefaultExcludes>false</noDefaultExcludes>
                <makeEmptyDirs>false</makeEmptyDirs>
                <patternSeparator>[, ]+</patternSeparator>
                <asciiMode>false</asciiMode>
              </jenkins.plugins.publish__over__ftp.BapFtpTransfer>
            </transfers>
            <useWorkspaceInPromotion>false</useWorkspaceInPromotion>
            <usePromotionTimestamp>false</usePromotionTimestamp>
          </jenkins.plugins.publish__over__ftp.BapFtpPublisher>
        </publishers>
        <continueOnError>false</continueOnError>
        <failOnError>false</failOnError>
        <alwaysPublishFromMaster>false</alwaysPublishFromMaster>
        <hostConfigurationAccess class="jenkins.plugins.publish_over_ftp.BapFtpPublisherPlugin" reference="../.."/>
      </delegate>
    </jenkins.plugins.publish__over__ftp.BapFtpPublisherPlugin>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>po.cheng@technexion.com</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>