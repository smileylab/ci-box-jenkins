<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>build rescue diskimage from SPL, u-boot.img, kernel, and rootfs.cpio.xz&#xd;
&#xd;
32bits configs: &quot;pico-imx6_spl&quot; &quot;pico-imx7d_spl&quot; &quot;pico-imx6ul_spl&quot; &quot;edm-cf-imx6_spl&quot;&#xd;
             &quot;edm1-cf-imx6sx_spl&quot; &quot;edm1-imx6ul-nand_spl&quot; &quot;edm1-imx7d_spl&quot;&#xd;
             &quot;tek3-imx6ul_spl&quot; &quot;tek-imx6_spl&quot; &quot;tep1-imx6ul_spl&quot; &quot;tep1-imx7d_spl&quot;&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>3</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.39.1">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/ubuntu</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <jenkins.triggers.ReverseBuildTrigger>
      <spec></spec>
      <upstreamProjects>rescue-buildroot-install-modules32-4.9.88-lvds-dual-channel-patch</upstreamProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </jenkins.triggers.ReverseBuildTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>rescue-buildroot-install-modules32-4.9.88-lvds-dual-channel-patch</project>
      <filter>rescue32/images/rootfs.cpio.xz</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_tn-kernel-4.9.88-lvds-dual-channel-patch</project>
      <filter>arch/arm/boot/zImage,arch/arm/boot/dts/*pico*.dtb,arch/arm/boot/dts/*edm*.dtb,arch/arm/boot/dts/*tek*.dtb,arch/arm/boot/dts/*tep*.dtb,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_uboot-v2017.03_4.9.88-lvds-dual-channel-patch</project>
      <filter>*/SPL,*/u-boot.img,board/technexion/**/tnrescue*.its,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x -e

BLDDIR=/home/jenkins/build/rescue-images

CONFIGS=(&quot;tek-imx6_spl&quot;) # &quot;pico-imx6_spl&quot; &quot;pico-imx7d_spl&quot; &quot;pico-imx6ul_spl&quot; &quot;edm-cf-imx6_spl&quot; &quot;edm1-imx7d_spl&quot; &quot;tek3-imx6ul_spl&quot; &quot;tek-imx6_spl&quot; &quot;tep1-imx6ul_spl&quot; &quot;tep1-imx7d_spl&quot;) # &quot;edm1-cf-imx6sx_spl&quot; &quot;edm1-imx6ul-nand_spl&quot;
PICOBOARDS=(&quot;hobbit&quot; &quot;pi&quot; &quot;nymph&quot; &quot;dwarf&quot;)
EDMBOARDS=(&quot;fairy&quot; &quot;tc0700&quot; &quot;tc1000&quot; &quot;goblin&quot; &quot;gnome&quot;)

# clear and make /home/jenkins/build/images/ directory to store disk images
[ -d $BLDDIR ] &amp;&amp; rm -fr ${BLDDIR}/* || mkdir -p ${BLDDIR}

# build rescue system disk images
mkdir -p ./fat

set_uenv_display() {
  #
  # added to ensure fdt names are overwritten correctly due to fucked-up u-boot boot script logics
  #
  echo &quot;baseboard=${2}&quot; &gt; ./fat/uEnv.txt
  echo &quot;fitboot=run setfdt; run fitargs; bootm 17880000#config@\${som}-\${form}\${fitboard};&quot; &gt;&gt; ./fat/uEnv.txt
  case ${1} in
    *imx6*)
      echo &quot;wifi_module=&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;setfdt=if test -n \${wifi_module} &amp;&amp; test \${wifi_module} = qca; then setenv fitboard -\${wifi_module}_\${baseboard}; else setenv fitboard _\${baseboard}; setenv fdtfile \${som}-\${form}_\${baseboard}.dtb; fi;&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;uenvcmd=if test -n \${som} &amp;&amp; test \${som} = imx6solo; then setenv som \&quot;imx6dl\&quot;; fi;&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    *imx7*)
      echo &quot;wifi_module=&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;setfdt=if test -n \${wifi_module} &amp;&amp; test \${wifi_module} = qca; then setenv fitboard -\${wifi_module}_\${baseboard}; else setenv fitboard _\${baseboard}; setenv fdtfile \${som}-\${form}_\${baseboard}.dtb; fi;&quot;
      ;;
    *imx6ul*)
      echo &quot;wifi_module=&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
  	*)
      ;;
  esac

  case ${2} in
    hobbit)
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800x480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    pi)
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800x480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    nymph)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    dwarf)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    fairy)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tc0700)
      echo &quot;display_autodetect=off&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1024x600@60,if=RGB24,bpp=32&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tc1000)
      echo &quot;display_autodetect=off&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1280x800@60,if=RGB24,bpp=32&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    goblin)
      ;;
    gnome)
      ;;
    tek3)
      echo &quot;display_autodetect=off&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1920x1080@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tep5)
      echo &quot;display_autodetect=off&quot; &gt;&gt; ./fat/uEnv.txt
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1920x1080@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
  	*)
      ;;
  esac
}

set_board() {
  echo &quot;Set Board ${1}...&quot;
  # copy out the xz disk image
  cp rescue_img tn_${1}-${2}_rescue
  # setup the uEnv.txt file
  # set the loopback device using the partition table
  LOOPPATH=($(losetup -P -f --show tn_${1}-${2}_rescue))
  # mount the fat partition to ./fat directory
  mount -t vfat ${LOOPPATH}p1 ./fat
  # setup uEnv.txt display
  set_uenv_display ${1} ${2}
  # umount the fat file system
  umount ./fat
  # un-set the loop device
  losetup -d ${LOOPPATH}
  # md5 checksum the disk image
  md5sum tn_${1}-${2}_rescue &gt; tn_${1}-${2}_rescue.md5.txt
  # xz the image and copy out to external volume
  xz -9 tn_${1}-${2}_rescue
  cp tn_${1}-${2}_rescue.xz ${BLDDIR}/tn_${1}-${2}_rescue.xz
}

make_fit() {
  # create an empty image file
  dd if=/dev/zero of=rescue_img bs=1M count=$1
  # fdisk the partitions in the empty image file
  echo &quot;start=2048, type=c, bootable&quot; | sfdisk rescue_img
  # set the loopback device using the partition table
  LOOPPATH=($(losetup -P -f --show rescue_img))
  sync
  # make the file system
  mkfs.vfat ${LOOPPATH}p1
  # mount the fat partition to ./fat directory
  mount -t vfat ${LOOPPATH}p1 ./fat
  # make the fit folder for generating FIT image
  mkdir -p ./fit/dtb
  # copy back the root file system image
  cp rescue32/images/rootfs.cpio.xz ./fit
  # copy back the kernel image
  cp arch/arm/boot/zImage ./fit
  # copy back the device trees
  cp arch/arm/boot/dts/*.dtb ./fit/dtb
  # copy back the fit source file
  cp $2 ./fit/tnrescue.its
  # generate the fit blob (require u-boot-tools) to ./fat
  mkimage -f ./fit/tnrescue.its ./fat/tnrescue.itb
  # clean up fit folder
  rm -fr ./fit
  # copy out the u-boot.img file to ./fat
  cp ${CONF}/u-boot.img ./fat
  # umount the fat file system
  umount ./fat
  # dd the SPL to image file
  dd if=${CONF}/SPL of=${LOOPPATH} bs=512 seek=2 oflag=dsync conv=notrunc
  sync
  # un-set the loop device
  losetup -d ${LOOPPATH}
}

ROOTFS_SIZE=$(stat --format %s rescue32/images/rootfs.cpio.xz)
KERNEL_SIZE=$(stat --format %s arch/arm/boot/zImage)
FDT_SIZE=2097152 # 2MB

for CONF in ${CONFIGS[@]}; do
  # gets the xz file size
  UBOOT_SIZE=$(stat --format %s ${CONF}/u-boot.img)
  DISK_SIZE=$(((((($ROOTFS_SIZE+$UBOOT_SIZE+$KERNEL_SIZE+$FDT_SIZE)/1048576)/8)+1)*8))
  echo &quot;Rootfs: $ROOTFS_SIZE Uboot: $UBOOT_SIZE Kernel: $KERNEL_SIZE, Disk: $DISK_SIZE&quot;

  # make_fit $DISK_SIZE $ITS_PATH
#  if [ &quot;$CONF&quot; == &quot;pico-imx6_spl&quot; ] || [ &quot;$CONF&quot; == &quot;edm-cf-imx6_spl&quot; ]; then
#    echo &quot;build $CONF images...&quot;
#    if [ &quot;$CONF&quot; == &quot;pico-imx6_spl&quot; ]; then
#      BOARDS=(&quot;hobbit&quot; &quot;pi&quot; &quot;nymph&quot; &quot;dwarf&quot;)
#    else
#      BOARDS=(&quot;fairy&quot; &quot;tc0700&quot; &quot;tc1000&quot; &quot;goblin&quot; &quot;gnome&quot;)
#    fi;
#
#    make_fit $DISK_SIZE board/technexion/${CONF/_spl/}/tnrescue-imx6dl.its
#    for BOARD in ${BOARDS[@]}; do
#      set_board &quot;${CONF/_spl/}dl_spl&quot; ${BOARD}
#    done;
#    # remove the original disk image for the next config
#    rm -fr rescue_img
#
#    make_fit $DISK_SIZE board/technexion/${CONF/_spl/}/tnrescue-imx6q.its
#    for BOARD in ${BOARDS[@]}; do
#      set_board &quot;${CONF/_spl/}q_spl&quot; ${BOARD}
#    done;
#    # remove the original disk image for the next config
#    rm -fr rescue_img
#
#    if [ &quot;$CONF&quot; == &quot;edm-cf-imx6_spl&quot; ]; then
#      make_fit $DISK_SIZE board/technexion/${CONF/_spl}/tnrescue-imx6qp.its
#      for BOARD in ${BOARDS[@]}; do
#        set_board &quot;${CONF/_spl/}qp_spl&quot; ${BOARD}
#      done;
#      # remove the original disk image for the next config
#      rm -fr rescue_img
#    fi;
#
#  else
    echo &quot;build $CONF images...&quot;
    if [ -f board/technexion/${CONF/_spl/}/tnrescue-imx6dl.its ]; then
      make_fit $DISK_SIZE board/technexion/${CONF/_spl/}/tnrescue-imx6dl.its
      mv rescue_img rescue_img_${CONF/_spl}dl
    fi

    if [ -f board/technexion/${CONF/_spl/}/tnrescue-imx6q.its ]; then
      make_fit $DISK_SIZE board/technexion/${CONF/_spl/}/tnrescue-imx6q.its
      mv rescue_img rescue_img_${CONF/_spl}q
    fi

    if [ -f board/technexion/${CONF/_spl}/tnrescue-imx6qp.its ]; then
      make_fit $DISK_SIZE board/technexion/${CONF/_spl}/tnrescue-imx6qp.its
      mv rescue_img rescue_img_${CONF/_spl}qp
    fi;
	make_fit $DISK_SIZE board/technexion/${CONF/_spl/}/tnrescue.its

#  fi;

  case $CONF in
    pico*)
      for BOARD in ${PICOBOARDS[@]}; do
        set_board ${CONF} ${BOARD}
      done;
      # remove the original disk image for the next config
      rm -fr rescue_img
      if [ &quot;$CONF&quot; = &quot;pico-imx6_spl&quot; ]; then
        if [ -f rescue_img_${CONF/_spl/}dl ]; then
          mv rescue_img_${CONF/_spl/}dl rescue_img
          for BOARD in ${PICOBOARDS[@]}; do
            set_board ${CONF/_spl}dl_spl ${BOARD}
          done;
          rm -fr rescue_img
        fi
        if [ -f rescue_img_${CONF/_spl/}q ]; then
          mv rescue_img_${CONF/_spl/}q rescue_img
          for BOARD in ${PICOBOARDS[@]}; do
            set_board ${CONF/_spl}q_spl ${BOARD}
          done;
          rm -fr rescue_img
        fi
      fi
      ;;
    edm*)
      for BOARD in ${EDMBOARDS[@]}; do
        set_board ${CONF} ${BOARD}
      done;
      # remove the original disk image for the next config
      rm -fr rescue_img
      if [ &quot;$CONF&quot; = &quot;edm-cf-imx6_spl&quot; ]; then
        if [ -f rescue_img_${CONF/_spl/}dl ]; then
          mv rescue_img_${CONF/_spl/}dl rescue_img
          for BOARD in ${EDMBOARDS[@]}; do
            set_board ${CONF/_spl}dl_spl ${BOARD}
          done;
          rm -fr rescue_img
        fi
        if [ -f rescue_img_${CONF/_spl/}q ]; then
          mv rescue_img_${CONF/_spl/}q rescue_img
          for BOARD in ${EDMBOARDS[@]}; do
            set_board ${CONF/_spl}q_spl ${BOARD}
          done;
          rm -fr rescue_img
        fi
        if [ -f rescue_img_${CONF/_spl/}qp ]; then
          mv rescue_img_${CONF/_spl/}qp rescue_img
          for BOARD in ${EDMBOARDS[@]}; do
            set_board ${CONF/_spl}qp_spl ${BOARD}
          done;
          rm -fr rescue_img
        fi
      fi
      ;;
    tep1*)
      set_board ${CONF} &quot;tep1&quot;
      # remove the original disk image for the next config
      rm -fr rescue_img
      ;;
    tek3*)
      set_board ${CONF} &quot;tek3&quot;
      # remove the original disk image for the next config
      rm -fr rescue_img
      ;;
    tek-imx6*)
      set_board ${CONF} &quot;tek3&quot;
      set_board ${CONF} &quot;tep5&quot;
      # remove the original disk image for the next config
      rm -fr rescue_img
      ;;
	tek*)
      set_board ${CONF} &quot;tek&quot;
      # remove the original disk image for the next config
      rm -fr rescue_img
      ;;
  	*)
      ;;
  esac

done
rm -fr ./fat
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xz,*.md5.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>po.cheng@technexion.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>true</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>