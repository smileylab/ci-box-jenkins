<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>build rescue diskimage from SPL, u-boot.img, kernel, and rootfs.cpio.xz</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>5</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.39.1">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>docker-slave/ubuntu</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <jenkins.triggers.ReverseBuildTrigger>
      <spec></spec>
      <upstreamProjects>rescue-uboot-4.1.15,rescue-buildroot-install-modules32-4.1.15</upstreamProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </jenkins.triggers.ReverseBuildTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>rescue-buildroot-install-modules32-4.1.15</project>
      <filter>rescue32/images/rootfs.cpio.xz</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>github_tn-kernel-4.1.15</project>
      <filter>arch/arm/boot/zImage,arch/arm/boot/dts/*pico*.dtb,arch/arm/boot/dts/*edm*.dtb,arch/arm/boot/dts/*tek*.dtb,arch/arm/boot/dts/*tep*.dtb,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.39.1">
      <project>rescue-uboot-4.1.15</project>
      <filter>BUILD-**/SPL,BUILD-**/uboot.img,BUILD-**/u-boot.img,board/technexion/**/tnrescue.its,changelog*</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
        <stable>true</stable>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

set -e

BLDDIR=/home/jenkins/build/rescue-origin-images

FORMS=(&quot;pico&quot; &quot;edm&quot;)
CONFIGS=(&quot;pico-imx6_spl&quot; &quot;pico-imx7d_spl&quot; &quot;pico-imx6ul_spl&quot; &quot;edm-cf-imx6_spl&quot;)
BOARDS=(&quot;hobbit&quot; &quot;pi&quot; &quot;nymph&quot; &quot;dwarf&quot; &quot;tc1000&quot; &quot;tc0700&quot;)

# clear and make /home/jenkins/build/images/ directory to store disk images
[ -d $BLDDIR ] &amp;&amp; rm -fr ${BLDDIR}/* || mkdir -p ${BLDDIR}

# build rescue system disk images
mkdir -p ./fat

set_uenv_display() {
  case ${1} in
    hobbit)
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800x480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    pi)
      echo &quot;displayinfo=video=mxcfb0:dev=lcd,800x480@60,if=RGB24&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    nymph)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    dwarf)
      echo &quot;displayinfo=video=mxcfb0:dev=hdmi,1280x720@60,if=RGB24 fbmem=28M&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tc1000)
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1280x800@60,if=RGB24,bpp=32&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
    tc0700)
      echo &quot;displayinfo=video=mxcfb0:dev=ldb,1024x600@60,if=RGB24,bpp=32&quot; &gt;&gt; ./fat/uEnv.txt
      ;;
  	*)
      ;;
  esac
}

set_board() {
    # copy out the xz disk image
    cp rescue_img tn_${1}-${2}_rescue
	# setup the uEnv.txt file
    # set the loopback device using the partition table
    LOOPPATH=($(losetup -P -f --show tn_${1}-${2}_rescue))
    # mount the fat partition to ./fat directory
    mount -t vfat ${LOOPPATH}p1 ./fat
    # update the uEnv.txt file
    echo &quot;baseboard=${2}&quot; &gt; ./fat/uEnv.txt
    # setup uEnv.txt display
    set_uenv_display ${2}
    # umount the fat file system
    umount ./fat
    # un-set the loop device
    losetup -d ${LOOPPATH}
    # xz the image and copy out to external volume
    xz -9 tn_${1}-${2}_rescue
    cp tn_${1}-${2}_rescue.xz ${BLDDIR}/tn_${1}-${2}_rescue.xz
}

ROOTFS_SIZE=$(stat --format %s rescue32/images/rootfs.cpio.xz)
KERNEL_SIZE=$(stat --format %s arch/arm/boot/zImage)
FDT_SIZE=2097152

for CONF in ${CONFIGS[@]}; do
  # gets the xz file size
  UBOOT_SIZE=$(stat --format %s BUILD-${CONF}/u-boot.img)
  DISK_SIZE=$(((((($ROOTFS_SIZE+$UBOOT_SIZE+$KERNEL_SIZE+$FDT_SIZE)/1048576)/8)+1)*8))
  echo &quot;Rootfs: $ROOTFS_SIZE Uboot: $UBOOT_SIZE Kernel: $KERNEL_SIZE, Disk: $DISK_SIZE&quot;

  # create an empty image file
  dd if=/dev/zero of=rescue_img bs=1M count=${DISK_SIZE}
  # fdisk the partitions in the empty image file
  echo &quot;start=2048, type=c, bootable&quot; | sfdisk rescue_img
  # set the loopback device using the partition table
  LOOPPATH=($(losetup -P -f --show rescue_img))
  sync
  # make the file system
  mkfs.vfat ${LOOPPATH}p1
  # mount the fat partition to ./fat directory
  mount -t vfat ${LOOPPATH}p1 ./fat
  # make the fit folder for generating FIT image
  mkdir -p ./fit/dtb
  # copy back the root file system image
  cp rescue32/images/rootfs.cpio.xz ./fit
  # copy back the kernel image
  cp arch/arm/boot/zImage ./fit
  # copy back the device trees
  for FORM in ${FORMS[@]}; do
    cp arch/arm/boot/dts/imx*-${FORM}*.dtb ./fit/dtb
  done
  # copy back the fit source file
  cp board/technexion/${CONF/_spl/}/tnrescue.its ./fit
  # generate the fit blob (require u-boot-tools) to ./fat
  mkimage -f ./fit/tnrescue.its ./fat/tnrescue.itb
  # clean up fit folder
  rm -fr ./fit
  # copy out the u-boot.img file to ./fat
  cp BUILD-${CONF}/u-boot.img ./fat
  # copy the changelog
  cp changelog* ./fat
  # umount the fat file system
  umount ./fat
  # dd the SPL to image file
  dd if=BUILD-${CONF}/SPL of=${LOOPPATH} bs=512 seek=2 oflag=dsync conv=notrunc
  sync
  # un-set the loop device
  losetup -d ${LOOPPATH}

  # copy the uEnv.txt file to ./fat for each board types
  for BOARD in ${BOARDS[@]}; do
    set_board ${CONF} ${BOARD}
  done

  # remove the original disk image
  rm -fr rescue_img
done
rm -fr ./fat
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xz</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>po.cheng@technexion.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>